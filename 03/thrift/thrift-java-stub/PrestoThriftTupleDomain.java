/**
 * Autogenerated by Thrift Compiler (0.17.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.17.0)", date = "2022-10-24")
public class PrestoThriftTupleDomain implements org.apache.thrift.TBase<PrestoThriftTupleDomain, PrestoThriftTupleDomain._Fields>, java.io.Serializable, Cloneable, Comparable<PrestoThriftTupleDomain> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PrestoThriftTupleDomain");

  private static final org.apache.thrift.protocol.TField DOMAINS_FIELD_DESC = new org.apache.thrift.protocol.TField("domains", org.apache.thrift.protocol.TType.MAP, (short)1);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new PrestoThriftTupleDomainStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new PrestoThriftTupleDomainTupleSchemeFactory();

  /**
   * Return a map of column names to constraints.
   */
  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,PrestoThriftDomain> domains; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * Return a map of column names to constraints.
     */
    DOMAINS((short)1, "domains");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DOMAINS
          return DOMAINS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.DOMAINS};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DOMAINS, new org.apache.thrift.meta_data.FieldMetaData("domains", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PrestoThriftDomain.class))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PrestoThriftTupleDomain.class, metaDataMap);
  }

  public PrestoThriftTupleDomain() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PrestoThriftTupleDomain(PrestoThriftTupleDomain other) {
    if (other.isSetDomains()) {
      java.util.Map<java.lang.String,PrestoThriftDomain> __this__domains = new java.util.HashMap<java.lang.String,PrestoThriftDomain>(other.domains.size());
      for (java.util.Map.Entry<java.lang.String, PrestoThriftDomain> other_element : other.domains.entrySet()) {

        java.lang.String other_element_key = other_element.getKey();
        PrestoThriftDomain other_element_value = other_element.getValue();

        java.lang.String __this__domains_copy_key = other_element_key;

        PrestoThriftDomain __this__domains_copy_value = new PrestoThriftDomain(other_element_value);

        __this__domains.put(__this__domains_copy_key, __this__domains_copy_value);
      }
      this.domains = __this__domains;
    }
  }

  @Override
  public PrestoThriftTupleDomain deepCopy() {
    return new PrestoThriftTupleDomain(this);
  }

  @Override
  public void clear() {
    this.domains = null;
  }

  public int getDomainsSize() {
    return (this.domains == null) ? 0 : this.domains.size();
  }

  public void putToDomains(java.lang.String key, PrestoThriftDomain val) {
    if (this.domains == null) {
      this.domains = new java.util.HashMap<java.lang.String,PrestoThriftDomain>();
    }
    this.domains.put(key, val);
  }

  /**
   * Return a map of column names to constraints.
   */
  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.String,PrestoThriftDomain> getDomains() {
    return this.domains;
  }

  /**
   * Return a map of column names to constraints.
   */
  public PrestoThriftTupleDomain setDomains(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,PrestoThriftDomain> domains) {
    this.domains = domains;
    return this;
  }

  public void unsetDomains() {
    this.domains = null;
  }

  /** Returns true if field domains is set (has been assigned a value) and false otherwise */
  public boolean isSetDomains() {
    return this.domains != null;
  }

  public void setDomainsIsSet(boolean value) {
    if (!value) {
      this.domains = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case DOMAINS:
      if (value == null) {
        unsetDomains();
      } else {
        setDomains((java.util.Map<java.lang.String,PrestoThriftDomain>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case DOMAINS:
      return getDomains();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case DOMAINS:
      return isSetDomains();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof PrestoThriftTupleDomain)
      return this.equals((PrestoThriftTupleDomain)that);
    return false;
  }

  public boolean equals(PrestoThriftTupleDomain that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_domains = true && this.isSetDomains();
    boolean that_present_domains = true && that.isSetDomains();
    if (this_present_domains || that_present_domains) {
      if (!(this_present_domains && that_present_domains))
        return false;
      if (!this.domains.equals(that.domains))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetDomains()) ? 131071 : 524287);
    if (isSetDomains())
      hashCode = hashCode * 8191 + domains.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(PrestoThriftTupleDomain other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetDomains(), other.isSetDomains());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDomains()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.domains, other.domains);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("PrestoThriftTupleDomain(");
    boolean first = true;

    if (isSetDomains()) {
      sb.append("domains:");
      if (this.domains == null) {
        sb.append("null");
      } else {
        sb.append(this.domains);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PrestoThriftTupleDomainStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public PrestoThriftTupleDomainStandardScheme getScheme() {
      return new PrestoThriftTupleDomainStandardScheme();
    }
  }

  private static class PrestoThriftTupleDomainStandardScheme extends org.apache.thrift.scheme.StandardScheme<PrestoThriftTupleDomain> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, PrestoThriftTupleDomain struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // DOMAINS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map32 = iprot.readMapBegin();
                struct.domains = new java.util.HashMap<java.lang.String,PrestoThriftDomain>(2*_map32.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _key33;
                @org.apache.thrift.annotation.Nullable PrestoThriftDomain _val34;
                for (int _i35 = 0; _i35 < _map32.size; ++_i35)
                {
                  _key33 = iprot.readString();
                  _val34 = new PrestoThriftDomain();
                  _val34.read(iprot);
                  struct.domains.put(_key33, _val34);
                }
                iprot.readMapEnd();
              }
              struct.setDomainsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, PrestoThriftTupleDomain struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.domains != null) {
        if (struct.isSetDomains()) {
          oprot.writeFieldBegin(DOMAINS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.domains.size()));
            for (java.util.Map.Entry<java.lang.String, PrestoThriftDomain> _iter36 : struct.domains.entrySet())
            {
              oprot.writeString(_iter36.getKey());
              _iter36.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PrestoThriftTupleDomainTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public PrestoThriftTupleDomainTupleScheme getScheme() {
      return new PrestoThriftTupleDomainTupleScheme();
    }
  }

  private static class PrestoThriftTupleDomainTupleScheme extends org.apache.thrift.scheme.TupleScheme<PrestoThriftTupleDomain> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, PrestoThriftTupleDomain struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetDomains()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetDomains()) {
        {
          oprot.writeI32(struct.domains.size());
          for (java.util.Map.Entry<java.lang.String, PrestoThriftDomain> _iter37 : struct.domains.entrySet())
          {
            oprot.writeString(_iter37.getKey());
            _iter37.getValue().write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, PrestoThriftTupleDomain struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TMap _map38 = iprot.readMapBegin(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT); 
          struct.domains = new java.util.HashMap<java.lang.String,PrestoThriftDomain>(2*_map38.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _key39;
          @org.apache.thrift.annotation.Nullable PrestoThriftDomain _val40;
          for (int _i41 = 0; _i41 < _map38.size; ++_i41)
          {
            _key39 = iprot.readString();
            _val40 = new PrestoThriftDomain();
            _val40.read(iprot);
            struct.domains.put(_key39, _val40);
          }
        }
        struct.setDomainsIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

