/**
 * Autogenerated by Thrift Compiler (0.17.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.17.0)", date = "2022-10-24")
public class PrestoThriftSplit implements org.apache.thrift.TBase<PrestoThriftSplit, PrestoThriftSplit._Fields>, java.io.Serializable, Cloneable, Comparable<PrestoThriftSplit> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PrestoThriftSplit");

  private static final org.apache.thrift.protocol.TField SPLIT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("splitId", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField HOSTS_FIELD_DESC = new org.apache.thrift.protocol.TField("hosts", org.apache.thrift.protocol.TType.LIST, (short)2);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new PrestoThriftSplitStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new PrestoThriftSplitTupleSchemeFactory();

  /**
   * Encodes all the information needed to identify a batch of rows to return to Presto.
   * For a basic scan, includes schema name, table name, and output constraint.
   * For an index scan, includes schema name, table name, set of keys to lookup and output constraint.
   */
  public @org.apache.thrift.annotation.Nullable PrestoThriftId splitId; // required
  /**
   * Identifies the set of hosts on which the rows are available. If empty, then the rows
   * are expected to be available on any host. The hosts in this list may be independent
   * from the hosts used to serve metadata requests.
   */
  public @org.apache.thrift.annotation.Nullable java.util.List<PrestoThriftHostAddress> hosts; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * Encodes all the information needed to identify a batch of rows to return to Presto.
     * For a basic scan, includes schema name, table name, and output constraint.
     * For an index scan, includes schema name, table name, set of keys to lookup and output constraint.
     */
    SPLIT_ID((short)1, "splitId"),
    /**
     * Identifies the set of hosts on which the rows are available. If empty, then the rows
     * are expected to be available on any host. The hosts in this list may be independent
     * from the hosts used to serve metadata requests.
     */
    HOSTS((short)2, "hosts");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SPLIT_ID
          return SPLIT_ID;
        case 2: // HOSTS
          return HOSTS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SPLIT_ID, new org.apache.thrift.meta_data.FieldMetaData("splitId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PrestoThriftId.class)));
    tmpMap.put(_Fields.HOSTS, new org.apache.thrift.meta_data.FieldMetaData("hosts", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PrestoThriftHostAddress.class))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PrestoThriftSplit.class, metaDataMap);
  }

  public PrestoThriftSplit() {
  }

  public PrestoThriftSplit(
    PrestoThriftId splitId,
    java.util.List<PrestoThriftHostAddress> hosts)
  {
    this();
    this.splitId = splitId;
    this.hosts = hosts;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PrestoThriftSplit(PrestoThriftSplit other) {
    if (other.isSetSplitId()) {
      this.splitId = new PrestoThriftId(other.splitId);
    }
    if (other.isSetHosts()) {
      java.util.List<PrestoThriftHostAddress> __this__hosts = new java.util.ArrayList<PrestoThriftHostAddress>(other.hosts.size());
      for (PrestoThriftHostAddress other_element : other.hosts) {
        __this__hosts.add(new PrestoThriftHostAddress(other_element));
      }
      this.hosts = __this__hosts;
    }
  }

  @Override
  public PrestoThriftSplit deepCopy() {
    return new PrestoThriftSplit(this);
  }

  @Override
  public void clear() {
    this.splitId = null;
    this.hosts = null;
  }

  /**
   * Encodes all the information needed to identify a batch of rows to return to Presto.
   * For a basic scan, includes schema name, table name, and output constraint.
   * For an index scan, includes schema name, table name, set of keys to lookup and output constraint.
   */
  @org.apache.thrift.annotation.Nullable
  public PrestoThriftId getSplitId() {
    return this.splitId;
  }

  /**
   * Encodes all the information needed to identify a batch of rows to return to Presto.
   * For a basic scan, includes schema name, table name, and output constraint.
   * For an index scan, includes schema name, table name, set of keys to lookup and output constraint.
   */
  public PrestoThriftSplit setSplitId(@org.apache.thrift.annotation.Nullable PrestoThriftId splitId) {
    this.splitId = splitId;
    return this;
  }

  public void unsetSplitId() {
    this.splitId = null;
  }

  /** Returns true if field splitId is set (has been assigned a value) and false otherwise */
  public boolean isSetSplitId() {
    return this.splitId != null;
  }

  public void setSplitIdIsSet(boolean value) {
    if (!value) {
      this.splitId = null;
    }
  }

  public int getHostsSize() {
    return (this.hosts == null) ? 0 : this.hosts.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<PrestoThriftHostAddress> getHostsIterator() {
    return (this.hosts == null) ? null : this.hosts.iterator();
  }

  public void addToHosts(PrestoThriftHostAddress elem) {
    if (this.hosts == null) {
      this.hosts = new java.util.ArrayList<PrestoThriftHostAddress>();
    }
    this.hosts.add(elem);
  }

  /**
   * Identifies the set of hosts on which the rows are available. If empty, then the rows
   * are expected to be available on any host. The hosts in this list may be independent
   * from the hosts used to serve metadata requests.
   */
  @org.apache.thrift.annotation.Nullable
  public java.util.List<PrestoThriftHostAddress> getHosts() {
    return this.hosts;
  }

  /**
   * Identifies the set of hosts on which the rows are available. If empty, then the rows
   * are expected to be available on any host. The hosts in this list may be independent
   * from the hosts used to serve metadata requests.
   */
  public PrestoThriftSplit setHosts(@org.apache.thrift.annotation.Nullable java.util.List<PrestoThriftHostAddress> hosts) {
    this.hosts = hosts;
    return this;
  }

  public void unsetHosts() {
    this.hosts = null;
  }

  /** Returns true if field hosts is set (has been assigned a value) and false otherwise */
  public boolean isSetHosts() {
    return this.hosts != null;
  }

  public void setHostsIsSet(boolean value) {
    if (!value) {
      this.hosts = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case SPLIT_ID:
      if (value == null) {
        unsetSplitId();
      } else {
        setSplitId((PrestoThriftId)value);
      }
      break;

    case HOSTS:
      if (value == null) {
        unsetHosts();
      } else {
        setHosts((java.util.List<PrestoThriftHostAddress>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case SPLIT_ID:
      return getSplitId();

    case HOSTS:
      return getHosts();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case SPLIT_ID:
      return isSetSplitId();
    case HOSTS:
      return isSetHosts();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof PrestoThriftSplit)
      return this.equals((PrestoThriftSplit)that);
    return false;
  }

  public boolean equals(PrestoThriftSplit that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_splitId = true && this.isSetSplitId();
    boolean that_present_splitId = true && that.isSetSplitId();
    if (this_present_splitId || that_present_splitId) {
      if (!(this_present_splitId && that_present_splitId))
        return false;
      if (!this.splitId.equals(that.splitId))
        return false;
    }

    boolean this_present_hosts = true && this.isSetHosts();
    boolean that_present_hosts = true && that.isSetHosts();
    if (this_present_hosts || that_present_hosts) {
      if (!(this_present_hosts && that_present_hosts))
        return false;
      if (!this.hosts.equals(that.hosts))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetSplitId()) ? 131071 : 524287);
    if (isSetSplitId())
      hashCode = hashCode * 8191 + splitId.hashCode();

    hashCode = hashCode * 8191 + ((isSetHosts()) ? 131071 : 524287);
    if (isSetHosts())
      hashCode = hashCode * 8191 + hosts.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(PrestoThriftSplit other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetSplitId(), other.isSetSplitId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSplitId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.splitId, other.splitId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetHosts(), other.isSetHosts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHosts()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hosts, other.hosts);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("PrestoThriftSplit(");
    boolean first = true;

    sb.append("splitId:");
    if (this.splitId == null) {
      sb.append("null");
    } else {
      sb.append(this.splitId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("hosts:");
    if (this.hosts == null) {
      sb.append("null");
    } else {
      sb.append(this.hosts);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (splitId != null) {
      splitId.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PrestoThriftSplitStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public PrestoThriftSplitStandardScheme getScheme() {
      return new PrestoThriftSplitStandardScheme();
    }
  }

  private static class PrestoThriftSplitStandardScheme extends org.apache.thrift.scheme.StandardScheme<PrestoThriftSplit> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, PrestoThriftSplit struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SPLIT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.splitId = new PrestoThriftId();
              struct.splitId.read(iprot);
              struct.setSplitIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // HOSTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list226 = iprot.readListBegin();
                struct.hosts = new java.util.ArrayList<PrestoThriftHostAddress>(_list226.size);
                @org.apache.thrift.annotation.Nullable PrestoThriftHostAddress _elem227;
                for (int _i228 = 0; _i228 < _list226.size; ++_i228)
                {
                  _elem227 = new PrestoThriftHostAddress();
                  _elem227.read(iprot);
                  struct.hosts.add(_elem227);
                }
                iprot.readListEnd();
              }
              struct.setHostsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, PrestoThriftSplit struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.splitId != null) {
        oprot.writeFieldBegin(SPLIT_ID_FIELD_DESC);
        struct.splitId.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.hosts != null) {
        oprot.writeFieldBegin(HOSTS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.hosts.size()));
          for (PrestoThriftHostAddress _iter229 : struct.hosts)
          {
            _iter229.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PrestoThriftSplitTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public PrestoThriftSplitTupleScheme getScheme() {
      return new PrestoThriftSplitTupleScheme();
    }
  }

  private static class PrestoThriftSplitTupleScheme extends org.apache.thrift.scheme.TupleScheme<PrestoThriftSplit> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, PrestoThriftSplit struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetSplitId()) {
        optionals.set(0);
      }
      if (struct.isSetHosts()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetSplitId()) {
        struct.splitId.write(oprot);
      }
      if (struct.isSetHosts()) {
        {
          oprot.writeI32(struct.hosts.size());
          for (PrestoThriftHostAddress _iter230 : struct.hosts)
          {
            _iter230.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, PrestoThriftSplit struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.splitId = new PrestoThriftId();
        struct.splitId.read(iprot);
        struct.setSplitIdIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list231 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.hosts = new java.util.ArrayList<PrestoThriftHostAddress>(_list231.size);
          @org.apache.thrift.annotation.Nullable PrestoThriftHostAddress _elem232;
          for (int _i233 = 0; _i233 < _list231.size; ++_i233)
          {
            _elem232 = new PrestoThriftHostAddress();
            _elem232.read(iprot);
            struct.hosts.add(_elem232);
          }
        }
        struct.setHostsIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

