/**
 * Autogenerated by Thrift Compiler (0.17.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.17.0)", date = "2022-10-24")
public class PrestoThriftBlock implements org.apache.thrift.TBase<PrestoThriftBlock, PrestoThriftBlock._Fields>, java.io.Serializable, Cloneable, Comparable<PrestoThriftBlock> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PrestoThriftBlock");

  private static final org.apache.thrift.protocol.TField INTEGER_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("integerData", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField BIGINT_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("bigintData", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField DOUBLE_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("doubleData", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField VARCHAR_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("varcharData", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField BOOLEAN_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("booleanData", org.apache.thrift.protocol.TType.STRUCT, (short)5);
  private static final org.apache.thrift.protocol.TField DATE_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("dateData", org.apache.thrift.protocol.TType.STRUCT, (short)6);
  private static final org.apache.thrift.protocol.TField TIMESTAMP_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("timestampData", org.apache.thrift.protocol.TType.STRUCT, (short)7);
  private static final org.apache.thrift.protocol.TField JSON_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("jsonData", org.apache.thrift.protocol.TType.STRUCT, (short)8);
  private static final org.apache.thrift.protocol.TField HYPER_LOG_LOG_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("hyperLogLogData", org.apache.thrift.protocol.TType.STRUCT, (short)9);
  private static final org.apache.thrift.protocol.TField BIGINT_ARRAY_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("bigintArrayData", org.apache.thrift.protocol.TType.STRUCT, (short)10);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new PrestoThriftBlockStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new PrestoThriftBlockTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable PrestoThriftInteger integerData; // optional
  public @org.apache.thrift.annotation.Nullable PrestoThriftBigint bigintData; // optional
  public @org.apache.thrift.annotation.Nullable PrestoThriftDouble doubleData; // optional
  public @org.apache.thrift.annotation.Nullable PrestoThriftVarchar varcharData; // optional
  public @org.apache.thrift.annotation.Nullable PrestoThriftBoolean booleanData; // optional
  public @org.apache.thrift.annotation.Nullable PrestoThriftDate dateData; // optional
  public @org.apache.thrift.annotation.Nullable PrestoThriftTimestamp timestampData; // optional
  public @org.apache.thrift.annotation.Nullable PrestoThriftJson jsonData; // optional
  public @org.apache.thrift.annotation.Nullable PrestoThriftHyperLogLog hyperLogLogData; // optional
  public @org.apache.thrift.annotation.Nullable PrestoThriftBigintArray bigintArrayData; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    INTEGER_DATA((short)1, "integerData"),
    BIGINT_DATA((short)2, "bigintData"),
    DOUBLE_DATA((short)3, "doubleData"),
    VARCHAR_DATA((short)4, "varcharData"),
    BOOLEAN_DATA((short)5, "booleanData"),
    DATE_DATA((short)6, "dateData"),
    TIMESTAMP_DATA((short)7, "timestampData"),
    JSON_DATA((short)8, "jsonData"),
    HYPER_LOG_LOG_DATA((short)9, "hyperLogLogData"),
    BIGINT_ARRAY_DATA((short)10, "bigintArrayData");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // INTEGER_DATA
          return INTEGER_DATA;
        case 2: // BIGINT_DATA
          return BIGINT_DATA;
        case 3: // DOUBLE_DATA
          return DOUBLE_DATA;
        case 4: // VARCHAR_DATA
          return VARCHAR_DATA;
        case 5: // BOOLEAN_DATA
          return BOOLEAN_DATA;
        case 6: // DATE_DATA
          return DATE_DATA;
        case 7: // TIMESTAMP_DATA
          return TIMESTAMP_DATA;
        case 8: // JSON_DATA
          return JSON_DATA;
        case 9: // HYPER_LOG_LOG_DATA
          return HYPER_LOG_LOG_DATA;
        case 10: // BIGINT_ARRAY_DATA
          return BIGINT_ARRAY_DATA;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.INTEGER_DATA,_Fields.BIGINT_DATA,_Fields.DOUBLE_DATA,_Fields.VARCHAR_DATA,_Fields.BOOLEAN_DATA,_Fields.DATE_DATA,_Fields.TIMESTAMP_DATA,_Fields.JSON_DATA,_Fields.HYPER_LOG_LOG_DATA,_Fields.BIGINT_ARRAY_DATA};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.INTEGER_DATA, new org.apache.thrift.meta_data.FieldMetaData("integerData", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PrestoThriftInteger.class)));
    tmpMap.put(_Fields.BIGINT_DATA, new org.apache.thrift.meta_data.FieldMetaData("bigintData", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PrestoThriftBigint.class)));
    tmpMap.put(_Fields.DOUBLE_DATA, new org.apache.thrift.meta_data.FieldMetaData("doubleData", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PrestoThriftDouble.class)));
    tmpMap.put(_Fields.VARCHAR_DATA, new org.apache.thrift.meta_data.FieldMetaData("varcharData", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PrestoThriftVarchar.class)));
    tmpMap.put(_Fields.BOOLEAN_DATA, new org.apache.thrift.meta_data.FieldMetaData("booleanData", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PrestoThriftBoolean.class)));
    tmpMap.put(_Fields.DATE_DATA, new org.apache.thrift.meta_data.FieldMetaData("dateData", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PrestoThriftDate.class)));
    tmpMap.put(_Fields.TIMESTAMP_DATA, new org.apache.thrift.meta_data.FieldMetaData("timestampData", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PrestoThriftTimestamp.class)));
    tmpMap.put(_Fields.JSON_DATA, new org.apache.thrift.meta_data.FieldMetaData("jsonData", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PrestoThriftJson.class)));
    tmpMap.put(_Fields.HYPER_LOG_LOG_DATA, new org.apache.thrift.meta_data.FieldMetaData("hyperLogLogData", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PrestoThriftHyperLogLog.class)));
    tmpMap.put(_Fields.BIGINT_ARRAY_DATA, new org.apache.thrift.meta_data.FieldMetaData("bigintArrayData", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PrestoThriftBigintArray.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PrestoThriftBlock.class, metaDataMap);
  }

  public PrestoThriftBlock() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PrestoThriftBlock(PrestoThriftBlock other) {
    if (other.isSetIntegerData()) {
      this.integerData = new PrestoThriftInteger(other.integerData);
    }
    if (other.isSetBigintData()) {
      this.bigintData = new PrestoThriftBigint(other.bigintData);
    }
    if (other.isSetDoubleData()) {
      this.doubleData = new PrestoThriftDouble(other.doubleData);
    }
    if (other.isSetVarcharData()) {
      this.varcharData = new PrestoThriftVarchar(other.varcharData);
    }
    if (other.isSetBooleanData()) {
      this.booleanData = new PrestoThriftBoolean(other.booleanData);
    }
    if (other.isSetDateData()) {
      this.dateData = new PrestoThriftDate(other.dateData);
    }
    if (other.isSetTimestampData()) {
      this.timestampData = new PrestoThriftTimestamp(other.timestampData);
    }
    if (other.isSetJsonData()) {
      this.jsonData = new PrestoThriftJson(other.jsonData);
    }
    if (other.isSetHyperLogLogData()) {
      this.hyperLogLogData = new PrestoThriftHyperLogLog(other.hyperLogLogData);
    }
    if (other.isSetBigintArrayData()) {
      this.bigintArrayData = new PrestoThriftBigintArray(other.bigintArrayData);
    }
  }

  @Override
  public PrestoThriftBlock deepCopy() {
    return new PrestoThriftBlock(this);
  }

  @Override
  public void clear() {
    this.integerData = null;
    this.bigintData = null;
    this.doubleData = null;
    this.varcharData = null;
    this.booleanData = null;
    this.dateData = null;
    this.timestampData = null;
    this.jsonData = null;
    this.hyperLogLogData = null;
    this.bigintArrayData = null;
  }

  @org.apache.thrift.annotation.Nullable
  public PrestoThriftInteger getIntegerData() {
    return this.integerData;
  }

  public PrestoThriftBlock setIntegerData(@org.apache.thrift.annotation.Nullable PrestoThriftInteger integerData) {
    this.integerData = integerData;
    return this;
  }

  public void unsetIntegerData() {
    this.integerData = null;
  }

  /** Returns true if field integerData is set (has been assigned a value) and false otherwise */
  public boolean isSetIntegerData() {
    return this.integerData != null;
  }

  public void setIntegerDataIsSet(boolean value) {
    if (!value) {
      this.integerData = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public PrestoThriftBigint getBigintData() {
    return this.bigintData;
  }

  public PrestoThriftBlock setBigintData(@org.apache.thrift.annotation.Nullable PrestoThriftBigint bigintData) {
    this.bigintData = bigintData;
    return this;
  }

  public void unsetBigintData() {
    this.bigintData = null;
  }

  /** Returns true if field bigintData is set (has been assigned a value) and false otherwise */
  public boolean isSetBigintData() {
    return this.bigintData != null;
  }

  public void setBigintDataIsSet(boolean value) {
    if (!value) {
      this.bigintData = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public PrestoThriftDouble getDoubleData() {
    return this.doubleData;
  }

  public PrestoThriftBlock setDoubleData(@org.apache.thrift.annotation.Nullable PrestoThriftDouble doubleData) {
    this.doubleData = doubleData;
    return this;
  }

  public void unsetDoubleData() {
    this.doubleData = null;
  }

  /** Returns true if field doubleData is set (has been assigned a value) and false otherwise */
  public boolean isSetDoubleData() {
    return this.doubleData != null;
  }

  public void setDoubleDataIsSet(boolean value) {
    if (!value) {
      this.doubleData = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public PrestoThriftVarchar getVarcharData() {
    return this.varcharData;
  }

  public PrestoThriftBlock setVarcharData(@org.apache.thrift.annotation.Nullable PrestoThriftVarchar varcharData) {
    this.varcharData = varcharData;
    return this;
  }

  public void unsetVarcharData() {
    this.varcharData = null;
  }

  /** Returns true if field varcharData is set (has been assigned a value) and false otherwise */
  public boolean isSetVarcharData() {
    return this.varcharData != null;
  }

  public void setVarcharDataIsSet(boolean value) {
    if (!value) {
      this.varcharData = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public PrestoThriftBoolean getBooleanData() {
    return this.booleanData;
  }

  public PrestoThriftBlock setBooleanData(@org.apache.thrift.annotation.Nullable PrestoThriftBoolean booleanData) {
    this.booleanData = booleanData;
    return this;
  }

  public void unsetBooleanData() {
    this.booleanData = null;
  }

  /** Returns true if field booleanData is set (has been assigned a value) and false otherwise */
  public boolean isSetBooleanData() {
    return this.booleanData != null;
  }

  public void setBooleanDataIsSet(boolean value) {
    if (!value) {
      this.booleanData = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public PrestoThriftDate getDateData() {
    return this.dateData;
  }

  public PrestoThriftBlock setDateData(@org.apache.thrift.annotation.Nullable PrestoThriftDate dateData) {
    this.dateData = dateData;
    return this;
  }

  public void unsetDateData() {
    this.dateData = null;
  }

  /** Returns true if field dateData is set (has been assigned a value) and false otherwise */
  public boolean isSetDateData() {
    return this.dateData != null;
  }

  public void setDateDataIsSet(boolean value) {
    if (!value) {
      this.dateData = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public PrestoThriftTimestamp getTimestampData() {
    return this.timestampData;
  }

  public PrestoThriftBlock setTimestampData(@org.apache.thrift.annotation.Nullable PrestoThriftTimestamp timestampData) {
    this.timestampData = timestampData;
    return this;
  }

  public void unsetTimestampData() {
    this.timestampData = null;
  }

  /** Returns true if field timestampData is set (has been assigned a value) and false otherwise */
  public boolean isSetTimestampData() {
    return this.timestampData != null;
  }

  public void setTimestampDataIsSet(boolean value) {
    if (!value) {
      this.timestampData = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public PrestoThriftJson getJsonData() {
    return this.jsonData;
  }

  public PrestoThriftBlock setJsonData(@org.apache.thrift.annotation.Nullable PrestoThriftJson jsonData) {
    this.jsonData = jsonData;
    return this;
  }

  public void unsetJsonData() {
    this.jsonData = null;
  }

  /** Returns true if field jsonData is set (has been assigned a value) and false otherwise */
  public boolean isSetJsonData() {
    return this.jsonData != null;
  }

  public void setJsonDataIsSet(boolean value) {
    if (!value) {
      this.jsonData = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public PrestoThriftHyperLogLog getHyperLogLogData() {
    return this.hyperLogLogData;
  }

  public PrestoThriftBlock setHyperLogLogData(@org.apache.thrift.annotation.Nullable PrestoThriftHyperLogLog hyperLogLogData) {
    this.hyperLogLogData = hyperLogLogData;
    return this;
  }

  public void unsetHyperLogLogData() {
    this.hyperLogLogData = null;
  }

  /** Returns true if field hyperLogLogData is set (has been assigned a value) and false otherwise */
  public boolean isSetHyperLogLogData() {
    return this.hyperLogLogData != null;
  }

  public void setHyperLogLogDataIsSet(boolean value) {
    if (!value) {
      this.hyperLogLogData = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public PrestoThriftBigintArray getBigintArrayData() {
    return this.bigintArrayData;
  }

  public PrestoThriftBlock setBigintArrayData(@org.apache.thrift.annotation.Nullable PrestoThriftBigintArray bigintArrayData) {
    this.bigintArrayData = bigintArrayData;
    return this;
  }

  public void unsetBigintArrayData() {
    this.bigintArrayData = null;
  }

  /** Returns true if field bigintArrayData is set (has been assigned a value) and false otherwise */
  public boolean isSetBigintArrayData() {
    return this.bigintArrayData != null;
  }

  public void setBigintArrayDataIsSet(boolean value) {
    if (!value) {
      this.bigintArrayData = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case INTEGER_DATA:
      if (value == null) {
        unsetIntegerData();
      } else {
        setIntegerData((PrestoThriftInteger)value);
      }
      break;

    case BIGINT_DATA:
      if (value == null) {
        unsetBigintData();
      } else {
        setBigintData((PrestoThriftBigint)value);
      }
      break;

    case DOUBLE_DATA:
      if (value == null) {
        unsetDoubleData();
      } else {
        setDoubleData((PrestoThriftDouble)value);
      }
      break;

    case VARCHAR_DATA:
      if (value == null) {
        unsetVarcharData();
      } else {
        setVarcharData((PrestoThriftVarchar)value);
      }
      break;

    case BOOLEAN_DATA:
      if (value == null) {
        unsetBooleanData();
      } else {
        setBooleanData((PrestoThriftBoolean)value);
      }
      break;

    case DATE_DATA:
      if (value == null) {
        unsetDateData();
      } else {
        setDateData((PrestoThriftDate)value);
      }
      break;

    case TIMESTAMP_DATA:
      if (value == null) {
        unsetTimestampData();
      } else {
        setTimestampData((PrestoThriftTimestamp)value);
      }
      break;

    case JSON_DATA:
      if (value == null) {
        unsetJsonData();
      } else {
        setJsonData((PrestoThriftJson)value);
      }
      break;

    case HYPER_LOG_LOG_DATA:
      if (value == null) {
        unsetHyperLogLogData();
      } else {
        setHyperLogLogData((PrestoThriftHyperLogLog)value);
      }
      break;

    case BIGINT_ARRAY_DATA:
      if (value == null) {
        unsetBigintArrayData();
      } else {
        setBigintArrayData((PrestoThriftBigintArray)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case INTEGER_DATA:
      return getIntegerData();

    case BIGINT_DATA:
      return getBigintData();

    case DOUBLE_DATA:
      return getDoubleData();

    case VARCHAR_DATA:
      return getVarcharData();

    case BOOLEAN_DATA:
      return getBooleanData();

    case DATE_DATA:
      return getDateData();

    case TIMESTAMP_DATA:
      return getTimestampData();

    case JSON_DATA:
      return getJsonData();

    case HYPER_LOG_LOG_DATA:
      return getHyperLogLogData();

    case BIGINT_ARRAY_DATA:
      return getBigintArrayData();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case INTEGER_DATA:
      return isSetIntegerData();
    case BIGINT_DATA:
      return isSetBigintData();
    case DOUBLE_DATA:
      return isSetDoubleData();
    case VARCHAR_DATA:
      return isSetVarcharData();
    case BOOLEAN_DATA:
      return isSetBooleanData();
    case DATE_DATA:
      return isSetDateData();
    case TIMESTAMP_DATA:
      return isSetTimestampData();
    case JSON_DATA:
      return isSetJsonData();
    case HYPER_LOG_LOG_DATA:
      return isSetHyperLogLogData();
    case BIGINT_ARRAY_DATA:
      return isSetBigintArrayData();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof PrestoThriftBlock)
      return this.equals((PrestoThriftBlock)that);
    return false;
  }

  public boolean equals(PrestoThriftBlock that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_integerData = true && this.isSetIntegerData();
    boolean that_present_integerData = true && that.isSetIntegerData();
    if (this_present_integerData || that_present_integerData) {
      if (!(this_present_integerData && that_present_integerData))
        return false;
      if (!this.integerData.equals(that.integerData))
        return false;
    }

    boolean this_present_bigintData = true && this.isSetBigintData();
    boolean that_present_bigintData = true && that.isSetBigintData();
    if (this_present_bigintData || that_present_bigintData) {
      if (!(this_present_bigintData && that_present_bigintData))
        return false;
      if (!this.bigintData.equals(that.bigintData))
        return false;
    }

    boolean this_present_doubleData = true && this.isSetDoubleData();
    boolean that_present_doubleData = true && that.isSetDoubleData();
    if (this_present_doubleData || that_present_doubleData) {
      if (!(this_present_doubleData && that_present_doubleData))
        return false;
      if (!this.doubleData.equals(that.doubleData))
        return false;
    }

    boolean this_present_varcharData = true && this.isSetVarcharData();
    boolean that_present_varcharData = true && that.isSetVarcharData();
    if (this_present_varcharData || that_present_varcharData) {
      if (!(this_present_varcharData && that_present_varcharData))
        return false;
      if (!this.varcharData.equals(that.varcharData))
        return false;
    }

    boolean this_present_booleanData = true && this.isSetBooleanData();
    boolean that_present_booleanData = true && that.isSetBooleanData();
    if (this_present_booleanData || that_present_booleanData) {
      if (!(this_present_booleanData && that_present_booleanData))
        return false;
      if (!this.booleanData.equals(that.booleanData))
        return false;
    }

    boolean this_present_dateData = true && this.isSetDateData();
    boolean that_present_dateData = true && that.isSetDateData();
    if (this_present_dateData || that_present_dateData) {
      if (!(this_present_dateData && that_present_dateData))
        return false;
      if (!this.dateData.equals(that.dateData))
        return false;
    }

    boolean this_present_timestampData = true && this.isSetTimestampData();
    boolean that_present_timestampData = true && that.isSetTimestampData();
    if (this_present_timestampData || that_present_timestampData) {
      if (!(this_present_timestampData && that_present_timestampData))
        return false;
      if (!this.timestampData.equals(that.timestampData))
        return false;
    }

    boolean this_present_jsonData = true && this.isSetJsonData();
    boolean that_present_jsonData = true && that.isSetJsonData();
    if (this_present_jsonData || that_present_jsonData) {
      if (!(this_present_jsonData && that_present_jsonData))
        return false;
      if (!this.jsonData.equals(that.jsonData))
        return false;
    }

    boolean this_present_hyperLogLogData = true && this.isSetHyperLogLogData();
    boolean that_present_hyperLogLogData = true && that.isSetHyperLogLogData();
    if (this_present_hyperLogLogData || that_present_hyperLogLogData) {
      if (!(this_present_hyperLogLogData && that_present_hyperLogLogData))
        return false;
      if (!this.hyperLogLogData.equals(that.hyperLogLogData))
        return false;
    }

    boolean this_present_bigintArrayData = true && this.isSetBigintArrayData();
    boolean that_present_bigintArrayData = true && that.isSetBigintArrayData();
    if (this_present_bigintArrayData || that_present_bigintArrayData) {
      if (!(this_present_bigintArrayData && that_present_bigintArrayData))
        return false;
      if (!this.bigintArrayData.equals(that.bigintArrayData))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetIntegerData()) ? 131071 : 524287);
    if (isSetIntegerData())
      hashCode = hashCode * 8191 + integerData.hashCode();

    hashCode = hashCode * 8191 + ((isSetBigintData()) ? 131071 : 524287);
    if (isSetBigintData())
      hashCode = hashCode * 8191 + bigintData.hashCode();

    hashCode = hashCode * 8191 + ((isSetDoubleData()) ? 131071 : 524287);
    if (isSetDoubleData())
      hashCode = hashCode * 8191 + doubleData.hashCode();

    hashCode = hashCode * 8191 + ((isSetVarcharData()) ? 131071 : 524287);
    if (isSetVarcharData())
      hashCode = hashCode * 8191 + varcharData.hashCode();

    hashCode = hashCode * 8191 + ((isSetBooleanData()) ? 131071 : 524287);
    if (isSetBooleanData())
      hashCode = hashCode * 8191 + booleanData.hashCode();

    hashCode = hashCode * 8191 + ((isSetDateData()) ? 131071 : 524287);
    if (isSetDateData())
      hashCode = hashCode * 8191 + dateData.hashCode();

    hashCode = hashCode * 8191 + ((isSetTimestampData()) ? 131071 : 524287);
    if (isSetTimestampData())
      hashCode = hashCode * 8191 + timestampData.hashCode();

    hashCode = hashCode * 8191 + ((isSetJsonData()) ? 131071 : 524287);
    if (isSetJsonData())
      hashCode = hashCode * 8191 + jsonData.hashCode();

    hashCode = hashCode * 8191 + ((isSetHyperLogLogData()) ? 131071 : 524287);
    if (isSetHyperLogLogData())
      hashCode = hashCode * 8191 + hyperLogLogData.hashCode();

    hashCode = hashCode * 8191 + ((isSetBigintArrayData()) ? 131071 : 524287);
    if (isSetBigintArrayData())
      hashCode = hashCode * 8191 + bigintArrayData.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(PrestoThriftBlock other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetIntegerData(), other.isSetIntegerData());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIntegerData()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.integerData, other.integerData);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetBigintData(), other.isSetBigintData());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBigintData()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bigintData, other.bigintData);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDoubleData(), other.isSetDoubleData());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDoubleData()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.doubleData, other.doubleData);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetVarcharData(), other.isSetVarcharData());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVarcharData()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.varcharData, other.varcharData);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetBooleanData(), other.isSetBooleanData());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBooleanData()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.booleanData, other.booleanData);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDateData(), other.isSetDateData());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDateData()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dateData, other.dateData);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTimestampData(), other.isSetTimestampData());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimestampData()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestampData, other.timestampData);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetJsonData(), other.isSetJsonData());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJsonData()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jsonData, other.jsonData);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetHyperLogLogData(), other.isSetHyperLogLogData());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHyperLogLogData()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hyperLogLogData, other.hyperLogLogData);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetBigintArrayData(), other.isSetBigintArrayData());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBigintArrayData()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bigintArrayData, other.bigintArrayData);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("PrestoThriftBlock(");
    boolean first = true;

    if (isSetIntegerData()) {
      sb.append("integerData:");
      if (this.integerData == null) {
        sb.append("null");
      } else {
        sb.append(this.integerData);
      }
      first = false;
    }
    if (isSetBigintData()) {
      if (!first) sb.append(", ");
      sb.append("bigintData:");
      if (this.bigintData == null) {
        sb.append("null");
      } else {
        sb.append(this.bigintData);
      }
      first = false;
    }
    if (isSetDoubleData()) {
      if (!first) sb.append(", ");
      sb.append("doubleData:");
      if (this.doubleData == null) {
        sb.append("null");
      } else {
        sb.append(this.doubleData);
      }
      first = false;
    }
    if (isSetVarcharData()) {
      if (!first) sb.append(", ");
      sb.append("varcharData:");
      if (this.varcharData == null) {
        sb.append("null");
      } else {
        sb.append(this.varcharData);
      }
      first = false;
    }
    if (isSetBooleanData()) {
      if (!first) sb.append(", ");
      sb.append("booleanData:");
      if (this.booleanData == null) {
        sb.append("null");
      } else {
        sb.append(this.booleanData);
      }
      first = false;
    }
    if (isSetDateData()) {
      if (!first) sb.append(", ");
      sb.append("dateData:");
      if (this.dateData == null) {
        sb.append("null");
      } else {
        sb.append(this.dateData);
      }
      first = false;
    }
    if (isSetTimestampData()) {
      if (!first) sb.append(", ");
      sb.append("timestampData:");
      if (this.timestampData == null) {
        sb.append("null");
      } else {
        sb.append(this.timestampData);
      }
      first = false;
    }
    if (isSetJsonData()) {
      if (!first) sb.append(", ");
      sb.append("jsonData:");
      if (this.jsonData == null) {
        sb.append("null");
      } else {
        sb.append(this.jsonData);
      }
      first = false;
    }
    if (isSetHyperLogLogData()) {
      if (!first) sb.append(", ");
      sb.append("hyperLogLogData:");
      if (this.hyperLogLogData == null) {
        sb.append("null");
      } else {
        sb.append(this.hyperLogLogData);
      }
      first = false;
    }
    if (isSetBigintArrayData()) {
      if (!first) sb.append(", ");
      sb.append("bigintArrayData:");
      if (this.bigintArrayData == null) {
        sb.append("null");
      } else {
        sb.append(this.bigintArrayData);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (integerData != null) {
      integerData.validate();
    }
    if (bigintData != null) {
      bigintData.validate();
    }
    if (doubleData != null) {
      doubleData.validate();
    }
    if (varcharData != null) {
      varcharData.validate();
    }
    if (booleanData != null) {
      booleanData.validate();
    }
    if (dateData != null) {
      dateData.validate();
    }
    if (timestampData != null) {
      timestampData.validate();
    }
    if (jsonData != null) {
      jsonData.validate();
    }
    if (hyperLogLogData != null) {
      hyperLogLogData.validate();
    }
    if (bigintArrayData != null) {
      bigintArrayData.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PrestoThriftBlockStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public PrestoThriftBlockStandardScheme getScheme() {
      return new PrestoThriftBlockStandardScheme();
    }
  }

  private static class PrestoThriftBlockStandardScheme extends org.apache.thrift.scheme.StandardScheme<PrestoThriftBlock> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, PrestoThriftBlock struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // INTEGER_DATA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.integerData = new PrestoThriftInteger();
              struct.integerData.read(iprot);
              struct.setIntegerDataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // BIGINT_DATA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.bigintData = new PrestoThriftBigint();
              struct.bigintData.read(iprot);
              struct.setBigintDataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DOUBLE_DATA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.doubleData = new PrestoThriftDouble();
              struct.doubleData.read(iprot);
              struct.setDoubleDataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // VARCHAR_DATA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.varcharData = new PrestoThriftVarchar();
              struct.varcharData.read(iprot);
              struct.setVarcharDataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // BOOLEAN_DATA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.booleanData = new PrestoThriftBoolean();
              struct.booleanData.read(iprot);
              struct.setBooleanDataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // DATE_DATA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.dateData = new PrestoThriftDate();
              struct.dateData.read(iprot);
              struct.setDateDataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TIMESTAMP_DATA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.timestampData = new PrestoThriftTimestamp();
              struct.timestampData.read(iprot);
              struct.setTimestampDataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // JSON_DATA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.jsonData = new PrestoThriftJson();
              struct.jsonData.read(iprot);
              struct.setJsonDataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // HYPER_LOG_LOG_DATA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.hyperLogLogData = new PrestoThriftHyperLogLog();
              struct.hyperLogLogData.read(iprot);
              struct.setHyperLogLogDataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // BIGINT_ARRAY_DATA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.bigintArrayData = new PrestoThriftBigintArray();
              struct.bigintArrayData.read(iprot);
              struct.setBigintArrayDataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, PrestoThriftBlock struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.integerData != null) {
        if (struct.isSetIntegerData()) {
          oprot.writeFieldBegin(INTEGER_DATA_FIELD_DESC);
          struct.integerData.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.bigintData != null) {
        if (struct.isSetBigintData()) {
          oprot.writeFieldBegin(BIGINT_DATA_FIELD_DESC);
          struct.bigintData.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.doubleData != null) {
        if (struct.isSetDoubleData()) {
          oprot.writeFieldBegin(DOUBLE_DATA_FIELD_DESC);
          struct.doubleData.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.varcharData != null) {
        if (struct.isSetVarcharData()) {
          oprot.writeFieldBegin(VARCHAR_DATA_FIELD_DESC);
          struct.varcharData.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.booleanData != null) {
        if (struct.isSetBooleanData()) {
          oprot.writeFieldBegin(BOOLEAN_DATA_FIELD_DESC);
          struct.booleanData.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.dateData != null) {
        if (struct.isSetDateData()) {
          oprot.writeFieldBegin(DATE_DATA_FIELD_DESC);
          struct.dateData.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.timestampData != null) {
        if (struct.isSetTimestampData()) {
          oprot.writeFieldBegin(TIMESTAMP_DATA_FIELD_DESC);
          struct.timestampData.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.jsonData != null) {
        if (struct.isSetJsonData()) {
          oprot.writeFieldBegin(JSON_DATA_FIELD_DESC);
          struct.jsonData.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.hyperLogLogData != null) {
        if (struct.isSetHyperLogLogData()) {
          oprot.writeFieldBegin(HYPER_LOG_LOG_DATA_FIELD_DESC);
          struct.hyperLogLogData.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.bigintArrayData != null) {
        if (struct.isSetBigintArrayData()) {
          oprot.writeFieldBegin(BIGINT_ARRAY_DATA_FIELD_DESC);
          struct.bigintArrayData.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PrestoThriftBlockTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public PrestoThriftBlockTupleScheme getScheme() {
      return new PrestoThriftBlockTupleScheme();
    }
  }

  private static class PrestoThriftBlockTupleScheme extends org.apache.thrift.scheme.TupleScheme<PrestoThriftBlock> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, PrestoThriftBlock struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetIntegerData()) {
        optionals.set(0);
      }
      if (struct.isSetBigintData()) {
        optionals.set(1);
      }
      if (struct.isSetDoubleData()) {
        optionals.set(2);
      }
      if (struct.isSetVarcharData()) {
        optionals.set(3);
      }
      if (struct.isSetBooleanData()) {
        optionals.set(4);
      }
      if (struct.isSetDateData()) {
        optionals.set(5);
      }
      if (struct.isSetTimestampData()) {
        optionals.set(6);
      }
      if (struct.isSetJsonData()) {
        optionals.set(7);
      }
      if (struct.isSetHyperLogLogData()) {
        optionals.set(8);
      }
      if (struct.isSetBigintArrayData()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetIntegerData()) {
        struct.integerData.write(oprot);
      }
      if (struct.isSetBigintData()) {
        struct.bigintData.write(oprot);
      }
      if (struct.isSetDoubleData()) {
        struct.doubleData.write(oprot);
      }
      if (struct.isSetVarcharData()) {
        struct.varcharData.write(oprot);
      }
      if (struct.isSetBooleanData()) {
        struct.booleanData.write(oprot);
      }
      if (struct.isSetDateData()) {
        struct.dateData.write(oprot);
      }
      if (struct.isSetTimestampData()) {
        struct.timestampData.write(oprot);
      }
      if (struct.isSetJsonData()) {
        struct.jsonData.write(oprot);
      }
      if (struct.isSetHyperLogLogData()) {
        struct.hyperLogLogData.write(oprot);
      }
      if (struct.isSetBigintArrayData()) {
        struct.bigintArrayData.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, PrestoThriftBlock struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        struct.integerData = new PrestoThriftInteger();
        struct.integerData.read(iprot);
        struct.setIntegerDataIsSet(true);
      }
      if (incoming.get(1)) {
        struct.bigintData = new PrestoThriftBigint();
        struct.bigintData.read(iprot);
        struct.setBigintDataIsSet(true);
      }
      if (incoming.get(2)) {
        struct.doubleData = new PrestoThriftDouble();
        struct.doubleData.read(iprot);
        struct.setDoubleDataIsSet(true);
      }
      if (incoming.get(3)) {
        struct.varcharData = new PrestoThriftVarchar();
        struct.varcharData.read(iprot);
        struct.setVarcharDataIsSet(true);
      }
      if (incoming.get(4)) {
        struct.booleanData = new PrestoThriftBoolean();
        struct.booleanData.read(iprot);
        struct.setBooleanDataIsSet(true);
      }
      if (incoming.get(5)) {
        struct.dateData = new PrestoThriftDate();
        struct.dateData.read(iprot);
        struct.setDateDataIsSet(true);
      }
      if (incoming.get(6)) {
        struct.timestampData = new PrestoThriftTimestamp();
        struct.timestampData.read(iprot);
        struct.setTimestampDataIsSet(true);
      }
      if (incoming.get(7)) {
        struct.jsonData = new PrestoThriftJson();
        struct.jsonData.read(iprot);
        struct.setJsonDataIsSet(true);
      }
      if (incoming.get(8)) {
        struct.hyperLogLogData = new PrestoThriftHyperLogLog();
        struct.hyperLogLogData.read(iprot);
        struct.setHyperLogLogDataIsSet(true);
      }
      if (incoming.get(9)) {
        struct.bigintArrayData = new PrestoThriftBigintArray();
        struct.bigintArrayData.read(iprot);
        struct.setBigintArrayDataIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

