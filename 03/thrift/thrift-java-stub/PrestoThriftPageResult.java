/**
 * Autogenerated by Thrift Compiler (0.17.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.17.0)", date = "2022-10-24")
public class PrestoThriftPageResult implements org.apache.thrift.TBase<PrestoThriftPageResult, PrestoThriftPageResult._Fields>, java.io.Serializable, Cloneable, Comparable<PrestoThriftPageResult> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PrestoThriftPageResult");

  private static final org.apache.thrift.protocol.TField COLUMN_BLOCKS_FIELD_DESC = new org.apache.thrift.protocol.TField("columnBlocks", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField ROW_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("rowCount", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField NEXT_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("nextToken", org.apache.thrift.protocol.TType.STRUCT, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new PrestoThriftPageResultStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new PrestoThriftPageResultTupleSchemeFactory();

  /**
   * Returns data in a columnar format.
   * Columns in this list must be in the order they were requested by the engine.
   */
  public @org.apache.thrift.annotation.Nullable java.util.List<PrestoThriftBlock> columnBlocks; // required
  public int rowCount; // required
  public @org.apache.thrift.annotation.Nullable PrestoThriftId nextToken; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * Returns data in a columnar format.
     * Columns in this list must be in the order they were requested by the engine.
     */
    COLUMN_BLOCKS((short)1, "columnBlocks"),
    ROW_COUNT((short)2, "rowCount"),
    NEXT_TOKEN((short)3, "nextToken");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // COLUMN_BLOCKS
          return COLUMN_BLOCKS;
        case 2: // ROW_COUNT
          return ROW_COUNT;
        case 3: // NEXT_TOKEN
          return NEXT_TOKEN;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ROWCOUNT_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.NEXT_TOKEN};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.COLUMN_BLOCKS, new org.apache.thrift.meta_data.FieldMetaData("columnBlocks", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PrestoThriftBlock.class))));
    tmpMap.put(_Fields.ROW_COUNT, new org.apache.thrift.meta_data.FieldMetaData("rowCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NEXT_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("nextToken", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PrestoThriftId.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PrestoThriftPageResult.class, metaDataMap);
  }

  public PrestoThriftPageResult() {
  }

  public PrestoThriftPageResult(
    java.util.List<PrestoThriftBlock> columnBlocks,
    int rowCount)
  {
    this();
    this.columnBlocks = columnBlocks;
    this.rowCount = rowCount;
    setRowCountIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PrestoThriftPageResult(PrestoThriftPageResult other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetColumnBlocks()) {
      java.util.List<PrestoThriftBlock> __this__columnBlocks = new java.util.ArrayList<PrestoThriftBlock>(other.columnBlocks.size());
      for (PrestoThriftBlock other_element : other.columnBlocks) {
        __this__columnBlocks.add(new PrestoThriftBlock(other_element));
      }
      this.columnBlocks = __this__columnBlocks;
    }
    this.rowCount = other.rowCount;
    if (other.isSetNextToken()) {
      this.nextToken = new PrestoThriftId(other.nextToken);
    }
  }

  @Override
  public PrestoThriftPageResult deepCopy() {
    return new PrestoThriftPageResult(this);
  }

  @Override
  public void clear() {
    this.columnBlocks = null;
    setRowCountIsSet(false);
    this.rowCount = 0;
    this.nextToken = null;
  }

  public int getColumnBlocksSize() {
    return (this.columnBlocks == null) ? 0 : this.columnBlocks.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<PrestoThriftBlock> getColumnBlocksIterator() {
    return (this.columnBlocks == null) ? null : this.columnBlocks.iterator();
  }

  public void addToColumnBlocks(PrestoThriftBlock elem) {
    if (this.columnBlocks == null) {
      this.columnBlocks = new java.util.ArrayList<PrestoThriftBlock>();
    }
    this.columnBlocks.add(elem);
  }

  /**
   * Returns data in a columnar format.
   * Columns in this list must be in the order they were requested by the engine.
   */
  @org.apache.thrift.annotation.Nullable
  public java.util.List<PrestoThriftBlock> getColumnBlocks() {
    return this.columnBlocks;
  }

  /**
   * Returns data in a columnar format.
   * Columns in this list must be in the order they were requested by the engine.
   */
  public PrestoThriftPageResult setColumnBlocks(@org.apache.thrift.annotation.Nullable java.util.List<PrestoThriftBlock> columnBlocks) {
    this.columnBlocks = columnBlocks;
    return this;
  }

  public void unsetColumnBlocks() {
    this.columnBlocks = null;
  }

  /** Returns true if field columnBlocks is set (has been assigned a value) and false otherwise */
  public boolean isSetColumnBlocks() {
    return this.columnBlocks != null;
  }

  public void setColumnBlocksIsSet(boolean value) {
    if (!value) {
      this.columnBlocks = null;
    }
  }

  public int getRowCount() {
    return this.rowCount;
  }

  public PrestoThriftPageResult setRowCount(int rowCount) {
    this.rowCount = rowCount;
    setRowCountIsSet(true);
    return this;
  }

  public void unsetRowCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ROWCOUNT_ISSET_ID);
  }

  /** Returns true if field rowCount is set (has been assigned a value) and false otherwise */
  public boolean isSetRowCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ROWCOUNT_ISSET_ID);
  }

  public void setRowCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ROWCOUNT_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public PrestoThriftId getNextToken() {
    return this.nextToken;
  }

  public PrestoThriftPageResult setNextToken(@org.apache.thrift.annotation.Nullable PrestoThriftId nextToken) {
    this.nextToken = nextToken;
    return this;
  }

  public void unsetNextToken() {
    this.nextToken = null;
  }

  /** Returns true if field nextToken is set (has been assigned a value) and false otherwise */
  public boolean isSetNextToken() {
    return this.nextToken != null;
  }

  public void setNextTokenIsSet(boolean value) {
    if (!value) {
      this.nextToken = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case COLUMN_BLOCKS:
      if (value == null) {
        unsetColumnBlocks();
      } else {
        setColumnBlocks((java.util.List<PrestoThriftBlock>)value);
      }
      break;

    case ROW_COUNT:
      if (value == null) {
        unsetRowCount();
      } else {
        setRowCount((java.lang.Integer)value);
      }
      break;

    case NEXT_TOKEN:
      if (value == null) {
        unsetNextToken();
      } else {
        setNextToken((PrestoThriftId)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case COLUMN_BLOCKS:
      return getColumnBlocks();

    case ROW_COUNT:
      return getRowCount();

    case NEXT_TOKEN:
      return getNextToken();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case COLUMN_BLOCKS:
      return isSetColumnBlocks();
    case ROW_COUNT:
      return isSetRowCount();
    case NEXT_TOKEN:
      return isSetNextToken();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof PrestoThriftPageResult)
      return this.equals((PrestoThriftPageResult)that);
    return false;
  }

  public boolean equals(PrestoThriftPageResult that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_columnBlocks = true && this.isSetColumnBlocks();
    boolean that_present_columnBlocks = true && that.isSetColumnBlocks();
    if (this_present_columnBlocks || that_present_columnBlocks) {
      if (!(this_present_columnBlocks && that_present_columnBlocks))
        return false;
      if (!this.columnBlocks.equals(that.columnBlocks))
        return false;
    }

    boolean this_present_rowCount = true;
    boolean that_present_rowCount = true;
    if (this_present_rowCount || that_present_rowCount) {
      if (!(this_present_rowCount && that_present_rowCount))
        return false;
      if (this.rowCount != that.rowCount)
        return false;
    }

    boolean this_present_nextToken = true && this.isSetNextToken();
    boolean that_present_nextToken = true && that.isSetNextToken();
    if (this_present_nextToken || that_present_nextToken) {
      if (!(this_present_nextToken && that_present_nextToken))
        return false;
      if (!this.nextToken.equals(that.nextToken))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetColumnBlocks()) ? 131071 : 524287);
    if (isSetColumnBlocks())
      hashCode = hashCode * 8191 + columnBlocks.hashCode();

    hashCode = hashCode * 8191 + rowCount;

    hashCode = hashCode * 8191 + ((isSetNextToken()) ? 131071 : 524287);
    if (isSetNextToken())
      hashCode = hashCode * 8191 + nextToken.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(PrestoThriftPageResult other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetColumnBlocks(), other.isSetColumnBlocks());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColumnBlocks()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columnBlocks, other.columnBlocks);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetRowCount(), other.isSetRowCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRowCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rowCount, other.rowCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetNextToken(), other.isSetNextToken());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNextToken()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nextToken, other.nextToken);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("PrestoThriftPageResult(");
    boolean first = true;

    sb.append("columnBlocks:");
    if (this.columnBlocks == null) {
      sb.append("null");
    } else {
      sb.append(this.columnBlocks);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("rowCount:");
    sb.append(this.rowCount);
    first = false;
    if (isSetNextToken()) {
      if (!first) sb.append(", ");
      sb.append("nextToken:");
      if (this.nextToken == null) {
        sb.append("null");
      } else {
        sb.append(this.nextToken);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (nextToken != null) {
      nextToken.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PrestoThriftPageResultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public PrestoThriftPageResultStandardScheme getScheme() {
      return new PrestoThriftPageResultStandardScheme();
    }
  }

  private static class PrestoThriftPageResultStandardScheme extends org.apache.thrift.scheme.StandardScheme<PrestoThriftPageResult> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, PrestoThriftPageResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // COLUMN_BLOCKS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list234 = iprot.readListBegin();
                struct.columnBlocks = new java.util.ArrayList<PrestoThriftBlock>(_list234.size);
                @org.apache.thrift.annotation.Nullable PrestoThriftBlock _elem235;
                for (int _i236 = 0; _i236 < _list234.size; ++_i236)
                {
                  _elem235 = new PrestoThriftBlock();
                  _elem235.read(iprot);
                  struct.columnBlocks.add(_elem235);
                }
                iprot.readListEnd();
              }
              struct.setColumnBlocksIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ROW_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rowCount = iprot.readI32();
              struct.setRowCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // NEXT_TOKEN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.nextToken = new PrestoThriftId();
              struct.nextToken.read(iprot);
              struct.setNextTokenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, PrestoThriftPageResult struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.columnBlocks != null) {
        oprot.writeFieldBegin(COLUMN_BLOCKS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.columnBlocks.size()));
          for (PrestoThriftBlock _iter237 : struct.columnBlocks)
          {
            _iter237.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ROW_COUNT_FIELD_DESC);
      oprot.writeI32(struct.rowCount);
      oprot.writeFieldEnd();
      if (struct.nextToken != null) {
        if (struct.isSetNextToken()) {
          oprot.writeFieldBegin(NEXT_TOKEN_FIELD_DESC);
          struct.nextToken.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PrestoThriftPageResultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public PrestoThriftPageResultTupleScheme getScheme() {
      return new PrestoThriftPageResultTupleScheme();
    }
  }

  private static class PrestoThriftPageResultTupleScheme extends org.apache.thrift.scheme.TupleScheme<PrestoThriftPageResult> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, PrestoThriftPageResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetColumnBlocks()) {
        optionals.set(0);
      }
      if (struct.isSetRowCount()) {
        optionals.set(1);
      }
      if (struct.isSetNextToken()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetColumnBlocks()) {
        {
          oprot.writeI32(struct.columnBlocks.size());
          for (PrestoThriftBlock _iter238 : struct.columnBlocks)
          {
            _iter238.write(oprot);
          }
        }
      }
      if (struct.isSetRowCount()) {
        oprot.writeI32(struct.rowCount);
      }
      if (struct.isSetNextToken()) {
        struct.nextToken.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, PrestoThriftPageResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list239 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.columnBlocks = new java.util.ArrayList<PrestoThriftBlock>(_list239.size);
          @org.apache.thrift.annotation.Nullable PrestoThriftBlock _elem240;
          for (int _i241 = 0; _i241 < _list239.size; ++_i241)
          {
            _elem240 = new PrestoThriftBlock();
            _elem240.read(iprot);
            struct.columnBlocks.add(_elem240);
          }
        }
        struct.setColumnBlocksIsSet(true);
      }
      if (incoming.get(1)) {
        struct.rowCount = iprot.readI32();
        struct.setRowCountIsSet(true);
      }
      if (incoming.get(2)) {
        struct.nextToken = new PrestoThriftId();
        struct.nextToken.read(iprot);
        struct.setNextTokenIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

