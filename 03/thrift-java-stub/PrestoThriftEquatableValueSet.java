/**
 * Autogenerated by Thrift Compiler (0.17.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
/**
 * A set containing values that are uniquely identifiable.
 * Assumes an infinite number of possible values. The values may be collectively included (aka whitelist)
 * or collectively excluded (aka !whitelist).
 * This structure is used with comparable, but not orderable types like "json", "map".
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.17.0)", date = "2022-10-24")
public class PrestoThriftEquatableValueSet implements org.apache.thrift.TBase<PrestoThriftEquatableValueSet, PrestoThriftEquatableValueSet._Fields>, java.io.Serializable, Cloneable, Comparable<PrestoThriftEquatableValueSet> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PrestoThriftEquatableValueSet");

  private static final org.apache.thrift.protocol.TField WHITE_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("whiteList", org.apache.thrift.protocol.TType.BOOL, (short)1);
  private static final org.apache.thrift.protocol.TField VALUES_FIELD_DESC = new org.apache.thrift.protocol.TField("values", org.apache.thrift.protocol.TType.LIST, (short)2);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new PrestoThriftEquatableValueSetStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new PrestoThriftEquatableValueSetTupleSchemeFactory();

  public boolean whiteList; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<PrestoThriftBlock> values; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    WHITE_LIST((short)1, "whiteList"),
    VALUES((short)2, "values");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // WHITE_LIST
          return WHITE_LIST;
        case 2: // VALUES
          return VALUES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __WHITELIST_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.WHITE_LIST, new org.apache.thrift.meta_data.FieldMetaData("whiteList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.VALUES, new org.apache.thrift.meta_data.FieldMetaData("values", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PrestoThriftBlock.class))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PrestoThriftEquatableValueSet.class, metaDataMap);
  }

  public PrestoThriftEquatableValueSet() {
  }

  public PrestoThriftEquatableValueSet(
    boolean whiteList,
    java.util.List<PrestoThriftBlock> values)
  {
    this();
    this.whiteList = whiteList;
    setWhiteListIsSet(true);
    this.values = values;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PrestoThriftEquatableValueSet(PrestoThriftEquatableValueSet other) {
    __isset_bitfield = other.__isset_bitfield;
    this.whiteList = other.whiteList;
    if (other.isSetValues()) {
      java.util.List<PrestoThriftBlock> __this__values = new java.util.ArrayList<PrestoThriftBlock>(other.values.size());
      for (PrestoThriftBlock other_element : other.values) {
        __this__values.add(new PrestoThriftBlock(other_element));
      }
      this.values = __this__values;
    }
  }

  @Override
  public PrestoThriftEquatableValueSet deepCopy() {
    return new PrestoThriftEquatableValueSet(this);
  }

  @Override
  public void clear() {
    setWhiteListIsSet(false);
    this.whiteList = false;
    this.values = null;
  }

  public boolean isWhiteList() {
    return this.whiteList;
  }

  public PrestoThriftEquatableValueSet setWhiteList(boolean whiteList) {
    this.whiteList = whiteList;
    setWhiteListIsSet(true);
    return this;
  }

  public void unsetWhiteList() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __WHITELIST_ISSET_ID);
  }

  /** Returns true if field whiteList is set (has been assigned a value) and false otherwise */
  public boolean isSetWhiteList() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __WHITELIST_ISSET_ID);
  }

  public void setWhiteListIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __WHITELIST_ISSET_ID, value);
  }

  public int getValuesSize() {
    return (this.values == null) ? 0 : this.values.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<PrestoThriftBlock> getValuesIterator() {
    return (this.values == null) ? null : this.values.iterator();
  }

  public void addToValues(PrestoThriftBlock elem) {
    if (this.values == null) {
      this.values = new java.util.ArrayList<PrestoThriftBlock>();
    }
    this.values.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<PrestoThriftBlock> getValues() {
    return this.values;
  }

  public PrestoThriftEquatableValueSet setValues(@org.apache.thrift.annotation.Nullable java.util.List<PrestoThriftBlock> values) {
    this.values = values;
    return this;
  }

  public void unsetValues() {
    this.values = null;
  }

  /** Returns true if field values is set (has been assigned a value) and false otherwise */
  public boolean isSetValues() {
    return this.values != null;
  }

  public void setValuesIsSet(boolean value) {
    if (!value) {
      this.values = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case WHITE_LIST:
      if (value == null) {
        unsetWhiteList();
      } else {
        setWhiteList((java.lang.Boolean)value);
      }
      break;

    case VALUES:
      if (value == null) {
        unsetValues();
      } else {
        setValues((java.util.List<PrestoThriftBlock>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case WHITE_LIST:
      return isWhiteList();

    case VALUES:
      return getValues();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case WHITE_LIST:
      return isSetWhiteList();
    case VALUES:
      return isSetValues();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof PrestoThriftEquatableValueSet)
      return this.equals((PrestoThriftEquatableValueSet)that);
    return false;
  }

  public boolean equals(PrestoThriftEquatableValueSet that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_whiteList = true;
    boolean that_present_whiteList = true;
    if (this_present_whiteList || that_present_whiteList) {
      if (!(this_present_whiteList && that_present_whiteList))
        return false;
      if (this.whiteList != that.whiteList)
        return false;
    }

    boolean this_present_values = true && this.isSetValues();
    boolean that_present_values = true && that.isSetValues();
    if (this_present_values || that_present_values) {
      if (!(this_present_values && that_present_values))
        return false;
      if (!this.values.equals(that.values))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((whiteList) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetValues()) ? 131071 : 524287);
    if (isSetValues())
      hashCode = hashCode * 8191 + values.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(PrestoThriftEquatableValueSet other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetWhiteList(), other.isSetWhiteList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWhiteList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.whiteList, other.whiteList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetValues(), other.isSetValues());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetValues()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.values, other.values);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("PrestoThriftEquatableValueSet(");
    boolean first = true;

    sb.append("whiteList:");
    sb.append(this.whiteList);
    first = false;
    if (!first) sb.append(", ");
    sb.append("values:");
    if (this.values == null) {
      sb.append("null");
    } else {
      sb.append(this.values);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PrestoThriftEquatableValueSetStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public PrestoThriftEquatableValueSetStandardScheme getScheme() {
      return new PrestoThriftEquatableValueSetStandardScheme();
    }
  }

  private static class PrestoThriftEquatableValueSetStandardScheme extends org.apache.thrift.scheme.StandardScheme<PrestoThriftEquatableValueSet> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, PrestoThriftEquatableValueSet struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // WHITE_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.whiteList = iprot.readBool();
              struct.setWhiteListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // VALUES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list42 = iprot.readListBegin();
                struct.values = new java.util.ArrayList<PrestoThriftBlock>(_list42.size);
                @org.apache.thrift.annotation.Nullable PrestoThriftBlock _elem43;
                for (int _i44 = 0; _i44 < _list42.size; ++_i44)
                {
                  _elem43 = new PrestoThriftBlock();
                  _elem43.read(iprot);
                  struct.values.add(_elem43);
                }
                iprot.readListEnd();
              }
              struct.setValuesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, PrestoThriftEquatableValueSet struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(WHITE_LIST_FIELD_DESC);
      oprot.writeBool(struct.whiteList);
      oprot.writeFieldEnd();
      if (struct.values != null) {
        oprot.writeFieldBegin(VALUES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.values.size()));
          for (PrestoThriftBlock _iter45 : struct.values)
          {
            _iter45.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PrestoThriftEquatableValueSetTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public PrestoThriftEquatableValueSetTupleScheme getScheme() {
      return new PrestoThriftEquatableValueSetTupleScheme();
    }
  }

  private static class PrestoThriftEquatableValueSetTupleScheme extends org.apache.thrift.scheme.TupleScheme<PrestoThriftEquatableValueSet> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, PrestoThriftEquatableValueSet struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetWhiteList()) {
        optionals.set(0);
      }
      if (struct.isSetValues()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetWhiteList()) {
        oprot.writeBool(struct.whiteList);
      }
      if (struct.isSetValues()) {
        {
          oprot.writeI32(struct.values.size());
          for (PrestoThriftBlock _iter46 : struct.values)
          {
            _iter46.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, PrestoThriftEquatableValueSet struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.whiteList = iprot.readBool();
        struct.setWhiteListIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list47 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.values = new java.util.ArrayList<PrestoThriftBlock>(_list47.size);
          @org.apache.thrift.annotation.Nullable PrestoThriftBlock _elem48;
          for (int _i49 = 0; _i49 < _list47.size; ++_i49)
          {
            _elem48 = new PrestoThriftBlock();
            _elem48.read(iprot);
            struct.values.add(_elem48);
          }
        }
        struct.setValuesIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

