/**
 * Autogenerated by Thrift Compiler (0.17.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.17.0)", date = "2022-10-24")
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
public class PrestoThriftService {

  /**
   * Presto Thrift service definition.
   * This thrift service needs to be implemented in order to be used with Thrift Connector.
   */
  public interface Iface {

    /**
     * Returns available schema names.
     */
    public java.util.List<java.lang.String> prestoListSchemaNames() throws PrestoThriftServiceException, org.apache.thrift.TException;

    /**
     * Returns tables for the given schema name.
     * 
     * @param schemaNameOrNull a structure containing schema name or {@literal null}
     * @return a list of table names with corresponding schemas. If schema name is null then returns
     * a list of tables for all schemas. Returns an empty list if a schema does not exist
     * 
     * @param schemaNameOrNull
     */
    public java.util.List<PrestoThriftSchemaTableName> prestoListTables(PrestoThriftNullableSchemaName schemaNameOrNull) throws PrestoThriftServiceException, org.apache.thrift.TException;

    /**
     * Returns metadata for a given table.
     * 
     * @param schemaTableName schema and table name
     * @return metadata for a given table, or a {@literal null} value inside if it does not exist
     * 
     * @param schemaTableName
     */
    public PrestoThriftNullableTableMetadata prestoGetTableMetadata(PrestoThriftSchemaTableName schemaTableName) throws PrestoThriftServiceException, org.apache.thrift.TException;

    /**
     * Returns a batch of splits.
     * 
     * @param schemaTableName schema and table name
     * @param desiredColumns a superset of columns to return; empty set means "no columns", {@literal null} set means "all columns"
     * @param outputConstraint constraint on the returned data
     * @param maxSplitCount maximum number of splits to return
     * @param nextToken token from a previous split batch or {@literal null} if it is the first call
     * @return a batch of splits
     * 
     * @param schemaTableName
     * @param desiredColumns
     * @param outputConstraint
     * @param maxSplitCount
     * @param nextToken
     */
    public PrestoThriftSplitBatch prestoGetSplits(PrestoThriftSchemaTableName schemaTableName, PrestoThriftNullableColumnSet desiredColumns, PrestoThriftTupleDomain outputConstraint, int maxSplitCount, PrestoThriftNullableToken nextToken) throws PrestoThriftServiceException, org.apache.thrift.TException;

    /**
     * Returns a batch of index splits for the given batch of keys.
     * This method is called if index join strategy is chosen for a query.
     * 
     * @param schemaTableName schema and table name
     * @param indexColumnNames specifies columns and their order for keys
     * @param outputColumnNames a list of column names to return
     * @param keys keys for which records need to be returned; includes only unique and non-null values
     * @param outputConstraint constraint on the returned data
     * @param maxSplitCount maximum number of splits to return
     * @param nextToken token from a previous split batch or {@literal null} if it is the first call
     * @return a batch of splits
     * 
     * @param schemaTableName
     * @param indexColumnNames
     * @param outputColumnNames
     * @param keys
     * @param outputConstraint
     * @param maxSplitCount
     * @param nextToken
     */
    public PrestoThriftSplitBatch prestoGetIndexSplits(PrestoThriftSchemaTableName schemaTableName, java.util.List<java.lang.String> indexColumnNames, java.util.List<java.lang.String> outputColumnNames, PrestoThriftPageResult keys, PrestoThriftTupleDomain outputConstraint, int maxSplitCount, PrestoThriftNullableToken nextToken) throws PrestoThriftServiceException, org.apache.thrift.TException;

    /**
     * Returns a batch of rows for the given split.
     * 
     * @param splitId split id as returned in split batch
     * @param columns a list of column names to return
     * @param maxBytes maximum size of returned data in bytes
     * @param nextToken token from a previous batch or {@literal null} if it is the first call
     * @return a batch of table data
     * 
     * @param splitId
     * @param columns
     * @param maxBytes
     * @param nextToken
     */
    public PrestoThriftPageResult prestoGetRows(PrestoThriftId splitId, java.util.List<java.lang.String> columns, long maxBytes, PrestoThriftNullableToken nextToken) throws PrestoThriftServiceException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void prestoListSchemaNames(org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>> resultHandler) throws org.apache.thrift.TException;

    public void prestoListTables(PrestoThriftNullableSchemaName schemaNameOrNull, org.apache.thrift.async.AsyncMethodCallback<java.util.List<PrestoThriftSchemaTableName>> resultHandler) throws org.apache.thrift.TException;

    public void prestoGetTableMetadata(PrestoThriftSchemaTableName schemaTableName, org.apache.thrift.async.AsyncMethodCallback<PrestoThriftNullableTableMetadata> resultHandler) throws org.apache.thrift.TException;

    public void prestoGetSplits(PrestoThriftSchemaTableName schemaTableName, PrestoThriftNullableColumnSet desiredColumns, PrestoThriftTupleDomain outputConstraint, int maxSplitCount, PrestoThriftNullableToken nextToken, org.apache.thrift.async.AsyncMethodCallback<PrestoThriftSplitBatch> resultHandler) throws org.apache.thrift.TException;

    public void prestoGetIndexSplits(PrestoThriftSchemaTableName schemaTableName, java.util.List<java.lang.String> indexColumnNames, java.util.List<java.lang.String> outputColumnNames, PrestoThriftPageResult keys, PrestoThriftTupleDomain outputConstraint, int maxSplitCount, PrestoThriftNullableToken nextToken, org.apache.thrift.async.AsyncMethodCallback<PrestoThriftSplitBatch> resultHandler) throws org.apache.thrift.TException;

    public void prestoGetRows(PrestoThriftId splitId, java.util.List<java.lang.String> columns, long maxBytes, PrestoThriftNullableToken nextToken, org.apache.thrift.async.AsyncMethodCallback<PrestoThriftPageResult> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      @Override
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      @Override
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    @Override
    public java.util.List<java.lang.String> prestoListSchemaNames() throws PrestoThriftServiceException, org.apache.thrift.TException
    {
      send_prestoListSchemaNames();
      return recv_prestoListSchemaNames();
    }

    public void send_prestoListSchemaNames() throws org.apache.thrift.TException
    {
      prestoListSchemaNames_args args = new prestoListSchemaNames_args();
      sendBase("prestoListSchemaNames", args);
    }

    public java.util.List<java.lang.String> recv_prestoListSchemaNames() throws PrestoThriftServiceException, org.apache.thrift.TException
    {
      prestoListSchemaNames_result result = new prestoListSchemaNames_result();
      receiveBase(result, "prestoListSchemaNames");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex1 != null) {
        throw result.ex1;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "prestoListSchemaNames failed: unknown result");
    }

    @Override
    public java.util.List<PrestoThriftSchemaTableName> prestoListTables(PrestoThriftNullableSchemaName schemaNameOrNull) throws PrestoThriftServiceException, org.apache.thrift.TException
    {
      send_prestoListTables(schemaNameOrNull);
      return recv_prestoListTables();
    }

    public void send_prestoListTables(PrestoThriftNullableSchemaName schemaNameOrNull) throws org.apache.thrift.TException
    {
      prestoListTables_args args = new prestoListTables_args();
      args.setSchemaNameOrNull(schemaNameOrNull);
      sendBase("prestoListTables", args);
    }

    public java.util.List<PrestoThriftSchemaTableName> recv_prestoListTables() throws PrestoThriftServiceException, org.apache.thrift.TException
    {
      prestoListTables_result result = new prestoListTables_result();
      receiveBase(result, "prestoListTables");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex1 != null) {
        throw result.ex1;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "prestoListTables failed: unknown result");
    }

    @Override
    public PrestoThriftNullableTableMetadata prestoGetTableMetadata(PrestoThriftSchemaTableName schemaTableName) throws PrestoThriftServiceException, org.apache.thrift.TException
    {
      send_prestoGetTableMetadata(schemaTableName);
      return recv_prestoGetTableMetadata();
    }

    public void send_prestoGetTableMetadata(PrestoThriftSchemaTableName schemaTableName) throws org.apache.thrift.TException
    {
      prestoGetTableMetadata_args args = new prestoGetTableMetadata_args();
      args.setSchemaTableName(schemaTableName);
      sendBase("prestoGetTableMetadata", args);
    }

    public PrestoThriftNullableTableMetadata recv_prestoGetTableMetadata() throws PrestoThriftServiceException, org.apache.thrift.TException
    {
      prestoGetTableMetadata_result result = new prestoGetTableMetadata_result();
      receiveBase(result, "prestoGetTableMetadata");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex1 != null) {
        throw result.ex1;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "prestoGetTableMetadata failed: unknown result");
    }

    @Override
    public PrestoThriftSplitBatch prestoGetSplits(PrestoThriftSchemaTableName schemaTableName, PrestoThriftNullableColumnSet desiredColumns, PrestoThriftTupleDomain outputConstraint, int maxSplitCount, PrestoThriftNullableToken nextToken) throws PrestoThriftServiceException, org.apache.thrift.TException
    {
      send_prestoGetSplits(schemaTableName, desiredColumns, outputConstraint, maxSplitCount, nextToken);
      return recv_prestoGetSplits();
    }

    public void send_prestoGetSplits(PrestoThriftSchemaTableName schemaTableName, PrestoThriftNullableColumnSet desiredColumns, PrestoThriftTupleDomain outputConstraint, int maxSplitCount, PrestoThriftNullableToken nextToken) throws org.apache.thrift.TException
    {
      prestoGetSplits_args args = new prestoGetSplits_args();
      args.setSchemaTableName(schemaTableName);
      args.setDesiredColumns(desiredColumns);
      args.setOutputConstraint(outputConstraint);
      args.setMaxSplitCount(maxSplitCount);
      args.setNextToken(nextToken);
      sendBase("prestoGetSplits", args);
    }

    public PrestoThriftSplitBatch recv_prestoGetSplits() throws PrestoThriftServiceException, org.apache.thrift.TException
    {
      prestoGetSplits_result result = new prestoGetSplits_result();
      receiveBase(result, "prestoGetSplits");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex1 != null) {
        throw result.ex1;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "prestoGetSplits failed: unknown result");
    }

    @Override
    public PrestoThriftSplitBatch prestoGetIndexSplits(PrestoThriftSchemaTableName schemaTableName, java.util.List<java.lang.String> indexColumnNames, java.util.List<java.lang.String> outputColumnNames, PrestoThriftPageResult keys, PrestoThriftTupleDomain outputConstraint, int maxSplitCount, PrestoThriftNullableToken nextToken) throws PrestoThriftServiceException, org.apache.thrift.TException
    {
      send_prestoGetIndexSplits(schemaTableName, indexColumnNames, outputColumnNames, keys, outputConstraint, maxSplitCount, nextToken);
      return recv_prestoGetIndexSplits();
    }

    public void send_prestoGetIndexSplits(PrestoThriftSchemaTableName schemaTableName, java.util.List<java.lang.String> indexColumnNames, java.util.List<java.lang.String> outputColumnNames, PrestoThriftPageResult keys, PrestoThriftTupleDomain outputConstraint, int maxSplitCount, PrestoThriftNullableToken nextToken) throws org.apache.thrift.TException
    {
      prestoGetIndexSplits_args args = new prestoGetIndexSplits_args();
      args.setSchemaTableName(schemaTableName);
      args.setIndexColumnNames(indexColumnNames);
      args.setOutputColumnNames(outputColumnNames);
      args.setKeys(keys);
      args.setOutputConstraint(outputConstraint);
      args.setMaxSplitCount(maxSplitCount);
      args.setNextToken(nextToken);
      sendBase("prestoGetIndexSplits", args);
    }

    public PrestoThriftSplitBatch recv_prestoGetIndexSplits() throws PrestoThriftServiceException, org.apache.thrift.TException
    {
      prestoGetIndexSplits_result result = new prestoGetIndexSplits_result();
      receiveBase(result, "prestoGetIndexSplits");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex1 != null) {
        throw result.ex1;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "prestoGetIndexSplits failed: unknown result");
    }

    @Override
    public PrestoThriftPageResult prestoGetRows(PrestoThriftId splitId, java.util.List<java.lang.String> columns, long maxBytes, PrestoThriftNullableToken nextToken) throws PrestoThriftServiceException, org.apache.thrift.TException
    {
      send_prestoGetRows(splitId, columns, maxBytes, nextToken);
      return recv_prestoGetRows();
    }

    public void send_prestoGetRows(PrestoThriftId splitId, java.util.List<java.lang.String> columns, long maxBytes, PrestoThriftNullableToken nextToken) throws org.apache.thrift.TException
    {
      prestoGetRows_args args = new prestoGetRows_args();
      args.setSplitId(splitId);
      args.setColumns(columns);
      args.setMaxBytes(maxBytes);
      args.setNextToken(nextToken);
      sendBase("prestoGetRows", args);
    }

    public PrestoThriftPageResult recv_prestoGetRows() throws PrestoThriftServiceException, org.apache.thrift.TException
    {
      prestoGetRows_result result = new prestoGetRows_result();
      receiveBase(result, "prestoGetRows");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex1 != null) {
        throw result.ex1;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "prestoGetRows failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
    @Override
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    @Override
    public void prestoListSchemaNames(org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      prestoListSchemaNames_call method_call = new prestoListSchemaNames_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class prestoListSchemaNames_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<java.lang.String>> {
      public prestoListSchemaNames_call(org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("prestoListSchemaNames", org.apache.thrift.protocol.TMessageType.CALL, 0));
        prestoListSchemaNames_args args = new prestoListSchemaNames_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public java.util.List<java.lang.String> getResult() throws PrestoThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_prestoListSchemaNames();
      }
    }

    @Override
    public void prestoListTables(PrestoThriftNullableSchemaName schemaNameOrNull, org.apache.thrift.async.AsyncMethodCallback<java.util.List<PrestoThriftSchemaTableName>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      prestoListTables_call method_call = new prestoListTables_call(schemaNameOrNull, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class prestoListTables_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<PrestoThriftSchemaTableName>> {
      private PrestoThriftNullableSchemaName schemaNameOrNull;
      public prestoListTables_call(PrestoThriftNullableSchemaName schemaNameOrNull, org.apache.thrift.async.AsyncMethodCallback<java.util.List<PrestoThriftSchemaTableName>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.schemaNameOrNull = schemaNameOrNull;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("prestoListTables", org.apache.thrift.protocol.TMessageType.CALL, 0));
        prestoListTables_args args = new prestoListTables_args();
        args.setSchemaNameOrNull(schemaNameOrNull);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public java.util.List<PrestoThriftSchemaTableName> getResult() throws PrestoThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_prestoListTables();
      }
    }

    @Override
    public void prestoGetTableMetadata(PrestoThriftSchemaTableName schemaTableName, org.apache.thrift.async.AsyncMethodCallback<PrestoThriftNullableTableMetadata> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      prestoGetTableMetadata_call method_call = new prestoGetTableMetadata_call(schemaTableName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class prestoGetTableMetadata_call extends org.apache.thrift.async.TAsyncMethodCall<PrestoThriftNullableTableMetadata> {
      private PrestoThriftSchemaTableName schemaTableName;
      public prestoGetTableMetadata_call(PrestoThriftSchemaTableName schemaTableName, org.apache.thrift.async.AsyncMethodCallback<PrestoThriftNullableTableMetadata> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.schemaTableName = schemaTableName;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("prestoGetTableMetadata", org.apache.thrift.protocol.TMessageType.CALL, 0));
        prestoGetTableMetadata_args args = new prestoGetTableMetadata_args();
        args.setSchemaTableName(schemaTableName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public PrestoThriftNullableTableMetadata getResult() throws PrestoThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_prestoGetTableMetadata();
      }
    }

    @Override
    public void prestoGetSplits(PrestoThriftSchemaTableName schemaTableName, PrestoThriftNullableColumnSet desiredColumns, PrestoThriftTupleDomain outputConstraint, int maxSplitCount, PrestoThriftNullableToken nextToken, org.apache.thrift.async.AsyncMethodCallback<PrestoThriftSplitBatch> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      prestoGetSplits_call method_call = new prestoGetSplits_call(schemaTableName, desiredColumns, outputConstraint, maxSplitCount, nextToken, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class prestoGetSplits_call extends org.apache.thrift.async.TAsyncMethodCall<PrestoThriftSplitBatch> {
      private PrestoThriftSchemaTableName schemaTableName;
      private PrestoThriftNullableColumnSet desiredColumns;
      private PrestoThriftTupleDomain outputConstraint;
      private int maxSplitCount;
      private PrestoThriftNullableToken nextToken;
      public prestoGetSplits_call(PrestoThriftSchemaTableName schemaTableName, PrestoThriftNullableColumnSet desiredColumns, PrestoThriftTupleDomain outputConstraint, int maxSplitCount, PrestoThriftNullableToken nextToken, org.apache.thrift.async.AsyncMethodCallback<PrestoThriftSplitBatch> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.schemaTableName = schemaTableName;
        this.desiredColumns = desiredColumns;
        this.outputConstraint = outputConstraint;
        this.maxSplitCount = maxSplitCount;
        this.nextToken = nextToken;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("prestoGetSplits", org.apache.thrift.protocol.TMessageType.CALL, 0));
        prestoGetSplits_args args = new prestoGetSplits_args();
        args.setSchemaTableName(schemaTableName);
        args.setDesiredColumns(desiredColumns);
        args.setOutputConstraint(outputConstraint);
        args.setMaxSplitCount(maxSplitCount);
        args.setNextToken(nextToken);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public PrestoThriftSplitBatch getResult() throws PrestoThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_prestoGetSplits();
      }
    }

    @Override
    public void prestoGetIndexSplits(PrestoThriftSchemaTableName schemaTableName, java.util.List<java.lang.String> indexColumnNames, java.util.List<java.lang.String> outputColumnNames, PrestoThriftPageResult keys, PrestoThriftTupleDomain outputConstraint, int maxSplitCount, PrestoThriftNullableToken nextToken, org.apache.thrift.async.AsyncMethodCallback<PrestoThriftSplitBatch> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      prestoGetIndexSplits_call method_call = new prestoGetIndexSplits_call(schemaTableName, indexColumnNames, outputColumnNames, keys, outputConstraint, maxSplitCount, nextToken, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class prestoGetIndexSplits_call extends org.apache.thrift.async.TAsyncMethodCall<PrestoThriftSplitBatch> {
      private PrestoThriftSchemaTableName schemaTableName;
      private java.util.List<java.lang.String> indexColumnNames;
      private java.util.List<java.lang.String> outputColumnNames;
      private PrestoThriftPageResult keys;
      private PrestoThriftTupleDomain outputConstraint;
      private int maxSplitCount;
      private PrestoThriftNullableToken nextToken;
      public prestoGetIndexSplits_call(PrestoThriftSchemaTableName schemaTableName, java.util.List<java.lang.String> indexColumnNames, java.util.List<java.lang.String> outputColumnNames, PrestoThriftPageResult keys, PrestoThriftTupleDomain outputConstraint, int maxSplitCount, PrestoThriftNullableToken nextToken, org.apache.thrift.async.AsyncMethodCallback<PrestoThriftSplitBatch> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.schemaTableName = schemaTableName;
        this.indexColumnNames = indexColumnNames;
        this.outputColumnNames = outputColumnNames;
        this.keys = keys;
        this.outputConstraint = outputConstraint;
        this.maxSplitCount = maxSplitCount;
        this.nextToken = nextToken;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("prestoGetIndexSplits", org.apache.thrift.protocol.TMessageType.CALL, 0));
        prestoGetIndexSplits_args args = new prestoGetIndexSplits_args();
        args.setSchemaTableName(schemaTableName);
        args.setIndexColumnNames(indexColumnNames);
        args.setOutputColumnNames(outputColumnNames);
        args.setKeys(keys);
        args.setOutputConstraint(outputConstraint);
        args.setMaxSplitCount(maxSplitCount);
        args.setNextToken(nextToken);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public PrestoThriftSplitBatch getResult() throws PrestoThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_prestoGetIndexSplits();
      }
    }

    @Override
    public void prestoGetRows(PrestoThriftId splitId, java.util.List<java.lang.String> columns, long maxBytes, PrestoThriftNullableToken nextToken, org.apache.thrift.async.AsyncMethodCallback<PrestoThriftPageResult> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      prestoGetRows_call method_call = new prestoGetRows_call(splitId, columns, maxBytes, nextToken, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class prestoGetRows_call extends org.apache.thrift.async.TAsyncMethodCall<PrestoThriftPageResult> {
      private PrestoThriftId splitId;
      private java.util.List<java.lang.String> columns;
      private long maxBytes;
      private PrestoThriftNullableToken nextToken;
      public prestoGetRows_call(PrestoThriftId splitId, java.util.List<java.lang.String> columns, long maxBytes, PrestoThriftNullableToken nextToken, org.apache.thrift.async.AsyncMethodCallback<PrestoThriftPageResult> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.splitId = splitId;
        this.columns = columns;
        this.maxBytes = maxBytes;
        this.nextToken = nextToken;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("prestoGetRows", org.apache.thrift.protocol.TMessageType.CALL, 0));
        prestoGetRows_args args = new prestoGetRows_args();
        args.setSplitId(splitId);
        args.setColumns(columns);
        args.setMaxBytes(maxBytes);
        args.setNextToken(nextToken);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public PrestoThriftPageResult getResult() throws PrestoThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_prestoGetRows();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("prestoListSchemaNames", new prestoListSchemaNames());
      processMap.put("prestoListTables", new prestoListTables());
      processMap.put("prestoGetTableMetadata", new prestoGetTableMetadata());
      processMap.put("prestoGetSplits", new prestoGetSplits());
      processMap.put("prestoGetIndexSplits", new prestoGetIndexSplits());
      processMap.put("prestoGetRows", new prestoGetRows());
      return processMap;
    }

    public static class prestoListSchemaNames<I extends Iface> extends org.apache.thrift.ProcessFunction<I, prestoListSchemaNames_args> {
      public prestoListSchemaNames() {
        super("prestoListSchemaNames");
      }

      @Override
      public prestoListSchemaNames_args getEmptyArgsInstance() {
        return new prestoListSchemaNames_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public prestoListSchemaNames_result getResult(I iface, prestoListSchemaNames_args args) throws org.apache.thrift.TException {
        prestoListSchemaNames_result result = new prestoListSchemaNames_result();
        try {
          result.success = iface.prestoListSchemaNames();
        } catch (PrestoThriftServiceException ex1) {
          result.ex1 = ex1;
        }
        return result;
      }
    }

    public static class prestoListTables<I extends Iface> extends org.apache.thrift.ProcessFunction<I, prestoListTables_args> {
      public prestoListTables() {
        super("prestoListTables");
      }

      @Override
      public prestoListTables_args getEmptyArgsInstance() {
        return new prestoListTables_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public prestoListTables_result getResult(I iface, prestoListTables_args args) throws org.apache.thrift.TException {
        prestoListTables_result result = new prestoListTables_result();
        try {
          result.success = iface.prestoListTables(args.schemaNameOrNull);
        } catch (PrestoThriftServiceException ex1) {
          result.ex1 = ex1;
        }
        return result;
      }
    }

    public static class prestoGetTableMetadata<I extends Iface> extends org.apache.thrift.ProcessFunction<I, prestoGetTableMetadata_args> {
      public prestoGetTableMetadata() {
        super("prestoGetTableMetadata");
      }

      @Override
      public prestoGetTableMetadata_args getEmptyArgsInstance() {
        return new prestoGetTableMetadata_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public prestoGetTableMetadata_result getResult(I iface, prestoGetTableMetadata_args args) throws org.apache.thrift.TException {
        prestoGetTableMetadata_result result = new prestoGetTableMetadata_result();
        try {
          result.success = iface.prestoGetTableMetadata(args.schemaTableName);
        } catch (PrestoThriftServiceException ex1) {
          result.ex1 = ex1;
        }
        return result;
      }
    }

    public static class prestoGetSplits<I extends Iface> extends org.apache.thrift.ProcessFunction<I, prestoGetSplits_args> {
      public prestoGetSplits() {
        super("prestoGetSplits");
      }

      @Override
      public prestoGetSplits_args getEmptyArgsInstance() {
        return new prestoGetSplits_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public prestoGetSplits_result getResult(I iface, prestoGetSplits_args args) throws org.apache.thrift.TException {
        prestoGetSplits_result result = new prestoGetSplits_result();
        try {
          result.success = iface.prestoGetSplits(args.schemaTableName, args.desiredColumns, args.outputConstraint, args.maxSplitCount, args.nextToken);
        } catch (PrestoThriftServiceException ex1) {
          result.ex1 = ex1;
        }
        return result;
      }
    }

    public static class prestoGetIndexSplits<I extends Iface> extends org.apache.thrift.ProcessFunction<I, prestoGetIndexSplits_args> {
      public prestoGetIndexSplits() {
        super("prestoGetIndexSplits");
      }

      @Override
      public prestoGetIndexSplits_args getEmptyArgsInstance() {
        return new prestoGetIndexSplits_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public prestoGetIndexSplits_result getResult(I iface, prestoGetIndexSplits_args args) throws org.apache.thrift.TException {
        prestoGetIndexSplits_result result = new prestoGetIndexSplits_result();
        try {
          result.success = iface.prestoGetIndexSplits(args.schemaTableName, args.indexColumnNames, args.outputColumnNames, args.keys, args.outputConstraint, args.maxSplitCount, args.nextToken);
        } catch (PrestoThriftServiceException ex1) {
          result.ex1 = ex1;
        }
        return result;
      }
    }

    public static class prestoGetRows<I extends Iface> extends org.apache.thrift.ProcessFunction<I, prestoGetRows_args> {
      public prestoGetRows() {
        super("prestoGetRows");
      }

      @Override
      public prestoGetRows_args getEmptyArgsInstance() {
        return new prestoGetRows_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public prestoGetRows_result getResult(I iface, prestoGetRows_args args) throws org.apache.thrift.TException {
        prestoGetRows_result result = new prestoGetRows_result();
        try {
          result.success = iface.prestoGetRows(args.splitId, args.columns, args.maxBytes, args.nextToken);
        } catch (PrestoThriftServiceException ex1) {
          result.ex1 = ex1;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("prestoListSchemaNames", new prestoListSchemaNames());
      processMap.put("prestoListTables", new prestoListTables());
      processMap.put("prestoGetTableMetadata", new prestoGetTableMetadata());
      processMap.put("prestoGetSplits", new prestoGetSplits());
      processMap.put("prestoGetIndexSplits", new prestoGetIndexSplits());
      processMap.put("prestoGetRows", new prestoGetRows());
      return processMap;
    }

    public static class prestoListSchemaNames<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, prestoListSchemaNames_args, java.util.List<java.lang.String>> {
      public prestoListSchemaNames() {
        super("prestoListSchemaNames");
      }

      @Override
      public prestoListSchemaNames_args getEmptyArgsInstance() {
        return new prestoListSchemaNames_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>>() { 
          @Override
          public void onComplete(java.util.List<java.lang.String> o) {
            prestoListSchemaNames_result result = new prestoListSchemaNames_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            prestoListSchemaNames_result result = new prestoListSchemaNames_result();
            if (e instanceof PrestoThriftServiceException) {
              result.ex1 = (PrestoThriftServiceException) e;
              result.setEx1IsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, prestoListSchemaNames_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>> resultHandler) throws org.apache.thrift.TException {
        iface.prestoListSchemaNames(resultHandler);
      }
    }

    public static class prestoListTables<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, prestoListTables_args, java.util.List<PrestoThriftSchemaTableName>> {
      public prestoListTables() {
        super("prestoListTables");
      }

      @Override
      public prestoListTables_args getEmptyArgsInstance() {
        return new prestoListTables_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<PrestoThriftSchemaTableName>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<PrestoThriftSchemaTableName>>() { 
          @Override
          public void onComplete(java.util.List<PrestoThriftSchemaTableName> o) {
            prestoListTables_result result = new prestoListTables_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            prestoListTables_result result = new prestoListTables_result();
            if (e instanceof PrestoThriftServiceException) {
              result.ex1 = (PrestoThriftServiceException) e;
              result.setEx1IsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, prestoListTables_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<PrestoThriftSchemaTableName>> resultHandler) throws org.apache.thrift.TException {
        iface.prestoListTables(args.schemaNameOrNull,resultHandler);
      }
    }

    public static class prestoGetTableMetadata<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, prestoGetTableMetadata_args, PrestoThriftNullableTableMetadata> {
      public prestoGetTableMetadata() {
        super("prestoGetTableMetadata");
      }

      @Override
      public prestoGetTableMetadata_args getEmptyArgsInstance() {
        return new prestoGetTableMetadata_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<PrestoThriftNullableTableMetadata> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<PrestoThriftNullableTableMetadata>() { 
          @Override
          public void onComplete(PrestoThriftNullableTableMetadata o) {
            prestoGetTableMetadata_result result = new prestoGetTableMetadata_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            prestoGetTableMetadata_result result = new prestoGetTableMetadata_result();
            if (e instanceof PrestoThriftServiceException) {
              result.ex1 = (PrestoThriftServiceException) e;
              result.setEx1IsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, prestoGetTableMetadata_args args, org.apache.thrift.async.AsyncMethodCallback<PrestoThriftNullableTableMetadata> resultHandler) throws org.apache.thrift.TException {
        iface.prestoGetTableMetadata(args.schemaTableName,resultHandler);
      }
    }

    public static class prestoGetSplits<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, prestoGetSplits_args, PrestoThriftSplitBatch> {
      public prestoGetSplits() {
        super("prestoGetSplits");
      }

      @Override
      public prestoGetSplits_args getEmptyArgsInstance() {
        return new prestoGetSplits_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<PrestoThriftSplitBatch> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<PrestoThriftSplitBatch>() { 
          @Override
          public void onComplete(PrestoThriftSplitBatch o) {
            prestoGetSplits_result result = new prestoGetSplits_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            prestoGetSplits_result result = new prestoGetSplits_result();
            if (e instanceof PrestoThriftServiceException) {
              result.ex1 = (PrestoThriftServiceException) e;
              result.setEx1IsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, prestoGetSplits_args args, org.apache.thrift.async.AsyncMethodCallback<PrestoThriftSplitBatch> resultHandler) throws org.apache.thrift.TException {
        iface.prestoGetSplits(args.schemaTableName, args.desiredColumns, args.outputConstraint, args.maxSplitCount, args.nextToken,resultHandler);
      }
    }

    public static class prestoGetIndexSplits<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, prestoGetIndexSplits_args, PrestoThriftSplitBatch> {
      public prestoGetIndexSplits() {
        super("prestoGetIndexSplits");
      }

      @Override
      public prestoGetIndexSplits_args getEmptyArgsInstance() {
        return new prestoGetIndexSplits_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<PrestoThriftSplitBatch> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<PrestoThriftSplitBatch>() { 
          @Override
          public void onComplete(PrestoThriftSplitBatch o) {
            prestoGetIndexSplits_result result = new prestoGetIndexSplits_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            prestoGetIndexSplits_result result = new prestoGetIndexSplits_result();
            if (e instanceof PrestoThriftServiceException) {
              result.ex1 = (PrestoThriftServiceException) e;
              result.setEx1IsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, prestoGetIndexSplits_args args, org.apache.thrift.async.AsyncMethodCallback<PrestoThriftSplitBatch> resultHandler) throws org.apache.thrift.TException {
        iface.prestoGetIndexSplits(args.schemaTableName, args.indexColumnNames, args.outputColumnNames, args.keys, args.outputConstraint, args.maxSplitCount, args.nextToken,resultHandler);
      }
    }

    public static class prestoGetRows<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, prestoGetRows_args, PrestoThriftPageResult> {
      public prestoGetRows() {
        super("prestoGetRows");
      }

      @Override
      public prestoGetRows_args getEmptyArgsInstance() {
        return new prestoGetRows_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<PrestoThriftPageResult> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<PrestoThriftPageResult>() { 
          @Override
          public void onComplete(PrestoThriftPageResult o) {
            prestoGetRows_result result = new prestoGetRows_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            prestoGetRows_result result = new prestoGetRows_result();
            if (e instanceof PrestoThriftServiceException) {
              result.ex1 = (PrestoThriftServiceException) e;
              result.setEx1IsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, prestoGetRows_args args, org.apache.thrift.async.AsyncMethodCallback<PrestoThriftPageResult> resultHandler) throws org.apache.thrift.TException {
        iface.prestoGetRows(args.splitId, args.columns, args.maxBytes, args.nextToken,resultHandler);
      }
    }

  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class prestoListSchemaNames_args implements org.apache.thrift.TBase<prestoListSchemaNames_args, prestoListSchemaNames_args._Fields>, java.io.Serializable, Cloneable, Comparable<prestoListSchemaNames_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("prestoListSchemaNames_args");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new prestoListSchemaNames_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new prestoListSchemaNames_argsTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(prestoListSchemaNames_args.class, metaDataMap);
    }

    public prestoListSchemaNames_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public prestoListSchemaNames_args(prestoListSchemaNames_args other) {
    }

    @Override
    public prestoListSchemaNames_args deepCopy() {
      return new prestoListSchemaNames_args(this);
    }

    @Override
    public void clear() {
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof prestoListSchemaNames_args)
        return this.equals((prestoListSchemaNames_args)that);
      return false;
    }

    public boolean equals(prestoListSchemaNames_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(prestoListSchemaNames_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("prestoListSchemaNames_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class prestoListSchemaNames_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public prestoListSchemaNames_argsStandardScheme getScheme() {
        return new prestoListSchemaNames_argsStandardScheme();
      }
    }

    private static class prestoListSchemaNames_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<prestoListSchemaNames_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, prestoListSchemaNames_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, prestoListSchemaNames_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class prestoListSchemaNames_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public prestoListSchemaNames_argsTupleScheme getScheme() {
        return new prestoListSchemaNames_argsTupleScheme();
      }
    }

    private static class prestoListSchemaNames_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<prestoListSchemaNames_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, prestoListSchemaNames_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, prestoListSchemaNames_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class prestoListSchemaNames_result implements org.apache.thrift.TBase<prestoListSchemaNames_result, prestoListSchemaNames_result._Fields>, java.io.Serializable, Cloneable, Comparable<prestoListSchemaNames_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("prestoListSchemaNames_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField EX1_FIELD_DESC = new org.apache.thrift.protocol.TField("ex1", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new prestoListSchemaNames_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new prestoListSchemaNames_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> success; // required
    public @org.apache.thrift.annotation.Nullable PrestoThriftServiceException ex1; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX1((short)1, "ex1");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX1
            return EX1;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.EX1, new org.apache.thrift.meta_data.FieldMetaData("ex1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PrestoThriftServiceException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(prestoListSchemaNames_result.class, metaDataMap);
    }

    public prestoListSchemaNames_result() {
    }

    public prestoListSchemaNames_result(
      java.util.List<java.lang.String> success,
      PrestoThriftServiceException ex1)
    {
      this();
      this.success = success;
      this.ex1 = ex1;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public prestoListSchemaNames_result(prestoListSchemaNames_result other) {
      if (other.isSetSuccess()) {
        java.util.List<java.lang.String> __this__success = new java.util.ArrayList<java.lang.String>(other.success);
        this.success = __this__success;
      }
      if (other.isSetEx1()) {
        this.ex1 = new PrestoThriftServiceException(other.ex1);
      }
    }

    @Override
    public prestoListSchemaNames_result deepCopy() {
      return new prestoListSchemaNames_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex1 = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<java.lang.String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(java.lang.String elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<java.lang.String>();
      }
      this.success.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<java.lang.String> getSuccess() {
      return this.success;
    }

    public prestoListSchemaNames_result setSuccess(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public PrestoThriftServiceException getEx1() {
      return this.ex1;
    }

    public prestoListSchemaNames_result setEx1(@org.apache.thrift.annotation.Nullable PrestoThriftServiceException ex1) {
      this.ex1 = ex1;
      return this;
    }

    public void unsetEx1() {
      this.ex1 = null;
    }

    /** Returns true if field ex1 is set (has been assigned a value) and false otherwise */
    public boolean isSetEx1() {
      return this.ex1 != null;
    }

    public void setEx1IsSet(boolean value) {
      if (!value) {
        this.ex1 = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<java.lang.String>)value);
        }
        break;

      case EX1:
        if (value == null) {
          unsetEx1();
        } else {
          setEx1((PrestoThriftServiceException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX1:
        return getEx1();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX1:
        return isSetEx1();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof prestoListSchemaNames_result)
        return this.equals((prestoListSchemaNames_result)that);
      return false;
    }

    public boolean equals(prestoListSchemaNames_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex1 = true && this.isSetEx1();
      boolean that_present_ex1 = true && that.isSetEx1();
      if (this_present_ex1 || that_present_ex1) {
        if (!(this_present_ex1 && that_present_ex1))
          return false;
        if (!this.ex1.equals(that.ex1))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetEx1()) ? 131071 : 524287);
      if (isSetEx1())
        hashCode = hashCode * 8191 + ex1.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(prestoListSchemaNames_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetEx1(), other.isSetEx1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex1, other.ex1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("prestoListSchemaNames_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex1:");
      if (this.ex1 == null) {
        sb.append("null");
      } else {
        sb.append(this.ex1);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class prestoListSchemaNames_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public prestoListSchemaNames_resultStandardScheme getScheme() {
        return new prestoListSchemaNames_resultStandardScheme();
      }
    }

    private static class prestoListSchemaNames_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<prestoListSchemaNames_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, prestoListSchemaNames_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list242 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<java.lang.String>(_list242.size);
                  @org.apache.thrift.annotation.Nullable java.lang.String _elem243;
                  for (int _i244 = 0; _i244 < _list242.size; ++_i244)
                  {
                    _elem243 = iprot.readString();
                    struct.success.add(_elem243);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex1 = new PrestoThriftServiceException();
                struct.ex1.read(iprot);
                struct.setEx1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, prestoListSchemaNames_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (java.lang.String _iter245 : struct.success)
            {
              oprot.writeString(_iter245);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ex1 != null) {
          oprot.writeFieldBegin(EX1_FIELD_DESC);
          struct.ex1.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class prestoListSchemaNames_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public prestoListSchemaNames_resultTupleScheme getScheme() {
        return new prestoListSchemaNames_resultTupleScheme();
      }
    }

    private static class prestoListSchemaNames_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<prestoListSchemaNames_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, prestoListSchemaNames_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx1()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (java.lang.String _iter246 : struct.success)
            {
              oprot.writeString(_iter246);
            }
          }
        }
        if (struct.isSetEx1()) {
          struct.ex1.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, prestoListSchemaNames_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list247 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
            struct.success = new java.util.ArrayList<java.lang.String>(_list247.size);
            @org.apache.thrift.annotation.Nullable java.lang.String _elem248;
            for (int _i249 = 0; _i249 < _list247.size; ++_i249)
            {
              _elem248 = iprot.readString();
              struct.success.add(_elem248);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex1 = new PrestoThriftServiceException();
          struct.ex1.read(iprot);
          struct.setEx1IsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class prestoListTables_args implements org.apache.thrift.TBase<prestoListTables_args, prestoListTables_args._Fields>, java.io.Serializable, Cloneable, Comparable<prestoListTables_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("prestoListTables_args");

    private static final org.apache.thrift.protocol.TField SCHEMA_NAME_OR_NULL_FIELD_DESC = new org.apache.thrift.protocol.TField("schemaNameOrNull", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new prestoListTables_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new prestoListTables_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable PrestoThriftNullableSchemaName schemaNameOrNull; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SCHEMA_NAME_OR_NULL((short)1, "schemaNameOrNull");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SCHEMA_NAME_OR_NULL
            return SCHEMA_NAME_OR_NULL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SCHEMA_NAME_OR_NULL, new org.apache.thrift.meta_data.FieldMetaData("schemaNameOrNull", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PrestoThriftNullableSchemaName.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(prestoListTables_args.class, metaDataMap);
    }

    public prestoListTables_args() {
    }

    public prestoListTables_args(
      PrestoThriftNullableSchemaName schemaNameOrNull)
    {
      this();
      this.schemaNameOrNull = schemaNameOrNull;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public prestoListTables_args(prestoListTables_args other) {
      if (other.isSetSchemaNameOrNull()) {
        this.schemaNameOrNull = new PrestoThriftNullableSchemaName(other.schemaNameOrNull);
      }
    }

    @Override
    public prestoListTables_args deepCopy() {
      return new prestoListTables_args(this);
    }

    @Override
    public void clear() {
      this.schemaNameOrNull = null;
    }

    @org.apache.thrift.annotation.Nullable
    public PrestoThriftNullableSchemaName getSchemaNameOrNull() {
      return this.schemaNameOrNull;
    }

    public prestoListTables_args setSchemaNameOrNull(@org.apache.thrift.annotation.Nullable PrestoThriftNullableSchemaName schemaNameOrNull) {
      this.schemaNameOrNull = schemaNameOrNull;
      return this;
    }

    public void unsetSchemaNameOrNull() {
      this.schemaNameOrNull = null;
    }

    /** Returns true if field schemaNameOrNull is set (has been assigned a value) and false otherwise */
    public boolean isSetSchemaNameOrNull() {
      return this.schemaNameOrNull != null;
    }

    public void setSchemaNameOrNullIsSet(boolean value) {
      if (!value) {
        this.schemaNameOrNull = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SCHEMA_NAME_OR_NULL:
        if (value == null) {
          unsetSchemaNameOrNull();
        } else {
          setSchemaNameOrNull((PrestoThriftNullableSchemaName)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SCHEMA_NAME_OR_NULL:
        return getSchemaNameOrNull();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SCHEMA_NAME_OR_NULL:
        return isSetSchemaNameOrNull();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof prestoListTables_args)
        return this.equals((prestoListTables_args)that);
      return false;
    }

    public boolean equals(prestoListTables_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_schemaNameOrNull = true && this.isSetSchemaNameOrNull();
      boolean that_present_schemaNameOrNull = true && that.isSetSchemaNameOrNull();
      if (this_present_schemaNameOrNull || that_present_schemaNameOrNull) {
        if (!(this_present_schemaNameOrNull && that_present_schemaNameOrNull))
          return false;
        if (!this.schemaNameOrNull.equals(that.schemaNameOrNull))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSchemaNameOrNull()) ? 131071 : 524287);
      if (isSetSchemaNameOrNull())
        hashCode = hashCode * 8191 + schemaNameOrNull.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(prestoListTables_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSchemaNameOrNull(), other.isSetSchemaNameOrNull());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSchemaNameOrNull()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schemaNameOrNull, other.schemaNameOrNull);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("prestoListTables_args(");
      boolean first = true;

      sb.append("schemaNameOrNull:");
      if (this.schemaNameOrNull == null) {
        sb.append("null");
      } else {
        sb.append(this.schemaNameOrNull);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (schemaNameOrNull != null) {
        schemaNameOrNull.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class prestoListTables_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public prestoListTables_argsStandardScheme getScheme() {
        return new prestoListTables_argsStandardScheme();
      }
    }

    private static class prestoListTables_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<prestoListTables_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, prestoListTables_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SCHEMA_NAME_OR_NULL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.schemaNameOrNull = new PrestoThriftNullableSchemaName();
                struct.schemaNameOrNull.read(iprot);
                struct.setSchemaNameOrNullIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, prestoListTables_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.schemaNameOrNull != null) {
          oprot.writeFieldBegin(SCHEMA_NAME_OR_NULL_FIELD_DESC);
          struct.schemaNameOrNull.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class prestoListTables_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public prestoListTables_argsTupleScheme getScheme() {
        return new prestoListTables_argsTupleScheme();
      }
    }

    private static class prestoListTables_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<prestoListTables_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, prestoListTables_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSchemaNameOrNull()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSchemaNameOrNull()) {
          struct.schemaNameOrNull.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, prestoListTables_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.schemaNameOrNull = new PrestoThriftNullableSchemaName();
          struct.schemaNameOrNull.read(iprot);
          struct.setSchemaNameOrNullIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class prestoListTables_result implements org.apache.thrift.TBase<prestoListTables_result, prestoListTables_result._Fields>, java.io.Serializable, Cloneable, Comparable<prestoListTables_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("prestoListTables_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField EX1_FIELD_DESC = new org.apache.thrift.protocol.TField("ex1", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new prestoListTables_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new prestoListTables_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.util.List<PrestoThriftSchemaTableName> success; // required
    public @org.apache.thrift.annotation.Nullable PrestoThriftServiceException ex1; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX1((short)1, "ex1");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX1
            return EX1;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PrestoThriftSchemaTableName.class))));
      tmpMap.put(_Fields.EX1, new org.apache.thrift.meta_data.FieldMetaData("ex1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PrestoThriftServiceException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(prestoListTables_result.class, metaDataMap);
    }

    public prestoListTables_result() {
    }

    public prestoListTables_result(
      java.util.List<PrestoThriftSchemaTableName> success,
      PrestoThriftServiceException ex1)
    {
      this();
      this.success = success;
      this.ex1 = ex1;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public prestoListTables_result(prestoListTables_result other) {
      if (other.isSetSuccess()) {
        java.util.List<PrestoThriftSchemaTableName> __this__success = new java.util.ArrayList<PrestoThriftSchemaTableName>(other.success.size());
        for (PrestoThriftSchemaTableName other_element : other.success) {
          __this__success.add(new PrestoThriftSchemaTableName(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetEx1()) {
        this.ex1 = new PrestoThriftServiceException(other.ex1);
      }
    }

    @Override
    public prestoListTables_result deepCopy() {
      return new prestoListTables_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex1 = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<PrestoThriftSchemaTableName> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(PrestoThriftSchemaTableName elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<PrestoThriftSchemaTableName>();
      }
      this.success.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<PrestoThriftSchemaTableName> getSuccess() {
      return this.success;
    }

    public prestoListTables_result setSuccess(@org.apache.thrift.annotation.Nullable java.util.List<PrestoThriftSchemaTableName> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public PrestoThriftServiceException getEx1() {
      return this.ex1;
    }

    public prestoListTables_result setEx1(@org.apache.thrift.annotation.Nullable PrestoThriftServiceException ex1) {
      this.ex1 = ex1;
      return this;
    }

    public void unsetEx1() {
      this.ex1 = null;
    }

    /** Returns true if field ex1 is set (has been assigned a value) and false otherwise */
    public boolean isSetEx1() {
      return this.ex1 != null;
    }

    public void setEx1IsSet(boolean value) {
      if (!value) {
        this.ex1 = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<PrestoThriftSchemaTableName>)value);
        }
        break;

      case EX1:
        if (value == null) {
          unsetEx1();
        } else {
          setEx1((PrestoThriftServiceException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX1:
        return getEx1();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX1:
        return isSetEx1();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof prestoListTables_result)
        return this.equals((prestoListTables_result)that);
      return false;
    }

    public boolean equals(prestoListTables_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex1 = true && this.isSetEx1();
      boolean that_present_ex1 = true && that.isSetEx1();
      if (this_present_ex1 || that_present_ex1) {
        if (!(this_present_ex1 && that_present_ex1))
          return false;
        if (!this.ex1.equals(that.ex1))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetEx1()) ? 131071 : 524287);
      if (isSetEx1())
        hashCode = hashCode * 8191 + ex1.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(prestoListTables_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetEx1(), other.isSetEx1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex1, other.ex1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("prestoListTables_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex1:");
      if (this.ex1 == null) {
        sb.append("null");
      } else {
        sb.append(this.ex1);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class prestoListTables_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public prestoListTables_resultStandardScheme getScheme() {
        return new prestoListTables_resultStandardScheme();
      }
    }

    private static class prestoListTables_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<prestoListTables_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, prestoListTables_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list250 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<PrestoThriftSchemaTableName>(_list250.size);
                  @org.apache.thrift.annotation.Nullable PrestoThriftSchemaTableName _elem251;
                  for (int _i252 = 0; _i252 < _list250.size; ++_i252)
                  {
                    _elem251 = new PrestoThriftSchemaTableName();
                    _elem251.read(iprot);
                    struct.success.add(_elem251);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex1 = new PrestoThriftServiceException();
                struct.ex1.read(iprot);
                struct.setEx1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, prestoListTables_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (PrestoThriftSchemaTableName _iter253 : struct.success)
            {
              _iter253.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ex1 != null) {
          oprot.writeFieldBegin(EX1_FIELD_DESC);
          struct.ex1.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class prestoListTables_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public prestoListTables_resultTupleScheme getScheme() {
        return new prestoListTables_resultTupleScheme();
      }
    }

    private static class prestoListTables_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<prestoListTables_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, prestoListTables_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx1()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (PrestoThriftSchemaTableName _iter254 : struct.success)
            {
              _iter254.write(oprot);
            }
          }
        }
        if (struct.isSetEx1()) {
          struct.ex1.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, prestoListTables_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list255 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
            struct.success = new java.util.ArrayList<PrestoThriftSchemaTableName>(_list255.size);
            @org.apache.thrift.annotation.Nullable PrestoThriftSchemaTableName _elem256;
            for (int _i257 = 0; _i257 < _list255.size; ++_i257)
            {
              _elem256 = new PrestoThriftSchemaTableName();
              _elem256.read(iprot);
              struct.success.add(_elem256);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex1 = new PrestoThriftServiceException();
          struct.ex1.read(iprot);
          struct.setEx1IsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class prestoGetTableMetadata_args implements org.apache.thrift.TBase<prestoGetTableMetadata_args, prestoGetTableMetadata_args._Fields>, java.io.Serializable, Cloneable, Comparable<prestoGetTableMetadata_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("prestoGetTableMetadata_args");

    private static final org.apache.thrift.protocol.TField SCHEMA_TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("schemaTableName", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new prestoGetTableMetadata_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new prestoGetTableMetadata_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable PrestoThriftSchemaTableName schemaTableName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SCHEMA_TABLE_NAME((short)1, "schemaTableName");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SCHEMA_TABLE_NAME
            return SCHEMA_TABLE_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SCHEMA_TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("schemaTableName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PrestoThriftSchemaTableName.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(prestoGetTableMetadata_args.class, metaDataMap);
    }

    public prestoGetTableMetadata_args() {
    }

    public prestoGetTableMetadata_args(
      PrestoThriftSchemaTableName schemaTableName)
    {
      this();
      this.schemaTableName = schemaTableName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public prestoGetTableMetadata_args(prestoGetTableMetadata_args other) {
      if (other.isSetSchemaTableName()) {
        this.schemaTableName = new PrestoThriftSchemaTableName(other.schemaTableName);
      }
    }

    @Override
    public prestoGetTableMetadata_args deepCopy() {
      return new prestoGetTableMetadata_args(this);
    }

    @Override
    public void clear() {
      this.schemaTableName = null;
    }

    @org.apache.thrift.annotation.Nullable
    public PrestoThriftSchemaTableName getSchemaTableName() {
      return this.schemaTableName;
    }

    public prestoGetTableMetadata_args setSchemaTableName(@org.apache.thrift.annotation.Nullable PrestoThriftSchemaTableName schemaTableName) {
      this.schemaTableName = schemaTableName;
      return this;
    }

    public void unsetSchemaTableName() {
      this.schemaTableName = null;
    }

    /** Returns true if field schemaTableName is set (has been assigned a value) and false otherwise */
    public boolean isSetSchemaTableName() {
      return this.schemaTableName != null;
    }

    public void setSchemaTableNameIsSet(boolean value) {
      if (!value) {
        this.schemaTableName = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SCHEMA_TABLE_NAME:
        if (value == null) {
          unsetSchemaTableName();
        } else {
          setSchemaTableName((PrestoThriftSchemaTableName)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SCHEMA_TABLE_NAME:
        return getSchemaTableName();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SCHEMA_TABLE_NAME:
        return isSetSchemaTableName();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof prestoGetTableMetadata_args)
        return this.equals((prestoGetTableMetadata_args)that);
      return false;
    }

    public boolean equals(prestoGetTableMetadata_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_schemaTableName = true && this.isSetSchemaTableName();
      boolean that_present_schemaTableName = true && that.isSetSchemaTableName();
      if (this_present_schemaTableName || that_present_schemaTableName) {
        if (!(this_present_schemaTableName && that_present_schemaTableName))
          return false;
        if (!this.schemaTableName.equals(that.schemaTableName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSchemaTableName()) ? 131071 : 524287);
      if (isSetSchemaTableName())
        hashCode = hashCode * 8191 + schemaTableName.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(prestoGetTableMetadata_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSchemaTableName(), other.isSetSchemaTableName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSchemaTableName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schemaTableName, other.schemaTableName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("prestoGetTableMetadata_args(");
      boolean first = true;

      sb.append("schemaTableName:");
      if (this.schemaTableName == null) {
        sb.append("null");
      } else {
        sb.append(this.schemaTableName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (schemaTableName != null) {
        schemaTableName.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class prestoGetTableMetadata_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public prestoGetTableMetadata_argsStandardScheme getScheme() {
        return new prestoGetTableMetadata_argsStandardScheme();
      }
    }

    private static class prestoGetTableMetadata_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<prestoGetTableMetadata_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, prestoGetTableMetadata_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SCHEMA_TABLE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.schemaTableName = new PrestoThriftSchemaTableName();
                struct.schemaTableName.read(iprot);
                struct.setSchemaTableNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, prestoGetTableMetadata_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.schemaTableName != null) {
          oprot.writeFieldBegin(SCHEMA_TABLE_NAME_FIELD_DESC);
          struct.schemaTableName.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class prestoGetTableMetadata_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public prestoGetTableMetadata_argsTupleScheme getScheme() {
        return new prestoGetTableMetadata_argsTupleScheme();
      }
    }

    private static class prestoGetTableMetadata_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<prestoGetTableMetadata_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, prestoGetTableMetadata_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSchemaTableName()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSchemaTableName()) {
          struct.schemaTableName.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, prestoGetTableMetadata_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.schemaTableName = new PrestoThriftSchemaTableName();
          struct.schemaTableName.read(iprot);
          struct.setSchemaTableNameIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class prestoGetTableMetadata_result implements org.apache.thrift.TBase<prestoGetTableMetadata_result, prestoGetTableMetadata_result._Fields>, java.io.Serializable, Cloneable, Comparable<prestoGetTableMetadata_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("prestoGetTableMetadata_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField EX1_FIELD_DESC = new org.apache.thrift.protocol.TField("ex1", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new prestoGetTableMetadata_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new prestoGetTableMetadata_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable PrestoThriftNullableTableMetadata success; // required
    public @org.apache.thrift.annotation.Nullable PrestoThriftServiceException ex1; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX1((short)1, "ex1");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX1
            return EX1;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PrestoThriftNullableTableMetadata.class)));
      tmpMap.put(_Fields.EX1, new org.apache.thrift.meta_data.FieldMetaData("ex1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PrestoThriftServiceException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(prestoGetTableMetadata_result.class, metaDataMap);
    }

    public prestoGetTableMetadata_result() {
    }

    public prestoGetTableMetadata_result(
      PrestoThriftNullableTableMetadata success,
      PrestoThriftServiceException ex1)
    {
      this();
      this.success = success;
      this.ex1 = ex1;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public prestoGetTableMetadata_result(prestoGetTableMetadata_result other) {
      if (other.isSetSuccess()) {
        this.success = new PrestoThriftNullableTableMetadata(other.success);
      }
      if (other.isSetEx1()) {
        this.ex1 = new PrestoThriftServiceException(other.ex1);
      }
    }

    @Override
    public prestoGetTableMetadata_result deepCopy() {
      return new prestoGetTableMetadata_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex1 = null;
    }

    @org.apache.thrift.annotation.Nullable
    public PrestoThriftNullableTableMetadata getSuccess() {
      return this.success;
    }

    public prestoGetTableMetadata_result setSuccess(@org.apache.thrift.annotation.Nullable PrestoThriftNullableTableMetadata success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public PrestoThriftServiceException getEx1() {
      return this.ex1;
    }

    public prestoGetTableMetadata_result setEx1(@org.apache.thrift.annotation.Nullable PrestoThriftServiceException ex1) {
      this.ex1 = ex1;
      return this;
    }

    public void unsetEx1() {
      this.ex1 = null;
    }

    /** Returns true if field ex1 is set (has been assigned a value) and false otherwise */
    public boolean isSetEx1() {
      return this.ex1 != null;
    }

    public void setEx1IsSet(boolean value) {
      if (!value) {
        this.ex1 = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((PrestoThriftNullableTableMetadata)value);
        }
        break;

      case EX1:
        if (value == null) {
          unsetEx1();
        } else {
          setEx1((PrestoThriftServiceException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX1:
        return getEx1();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX1:
        return isSetEx1();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof prestoGetTableMetadata_result)
        return this.equals((prestoGetTableMetadata_result)that);
      return false;
    }

    public boolean equals(prestoGetTableMetadata_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex1 = true && this.isSetEx1();
      boolean that_present_ex1 = true && that.isSetEx1();
      if (this_present_ex1 || that_present_ex1) {
        if (!(this_present_ex1 && that_present_ex1))
          return false;
        if (!this.ex1.equals(that.ex1))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetEx1()) ? 131071 : 524287);
      if (isSetEx1())
        hashCode = hashCode * 8191 + ex1.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(prestoGetTableMetadata_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetEx1(), other.isSetEx1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex1, other.ex1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("prestoGetTableMetadata_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex1:");
      if (this.ex1 == null) {
        sb.append("null");
      } else {
        sb.append(this.ex1);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class prestoGetTableMetadata_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public prestoGetTableMetadata_resultStandardScheme getScheme() {
        return new prestoGetTableMetadata_resultStandardScheme();
      }
    }

    private static class prestoGetTableMetadata_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<prestoGetTableMetadata_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, prestoGetTableMetadata_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new PrestoThriftNullableTableMetadata();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex1 = new PrestoThriftServiceException();
                struct.ex1.read(iprot);
                struct.setEx1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, prestoGetTableMetadata_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ex1 != null) {
          oprot.writeFieldBegin(EX1_FIELD_DESC);
          struct.ex1.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class prestoGetTableMetadata_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public prestoGetTableMetadata_resultTupleScheme getScheme() {
        return new prestoGetTableMetadata_resultTupleScheme();
      }
    }

    private static class prestoGetTableMetadata_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<prestoGetTableMetadata_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, prestoGetTableMetadata_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx1()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetEx1()) {
          struct.ex1.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, prestoGetTableMetadata_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new PrestoThriftNullableTableMetadata();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex1 = new PrestoThriftServiceException();
          struct.ex1.read(iprot);
          struct.setEx1IsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class prestoGetSplits_args implements org.apache.thrift.TBase<prestoGetSplits_args, prestoGetSplits_args._Fields>, java.io.Serializable, Cloneable, Comparable<prestoGetSplits_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("prestoGetSplits_args");

    private static final org.apache.thrift.protocol.TField SCHEMA_TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("schemaTableName", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField DESIRED_COLUMNS_FIELD_DESC = new org.apache.thrift.protocol.TField("desiredColumns", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField OUTPUT_CONSTRAINT_FIELD_DESC = new org.apache.thrift.protocol.TField("outputConstraint", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField MAX_SPLIT_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("maxSplitCount", org.apache.thrift.protocol.TType.I32, (short)4);
    private static final org.apache.thrift.protocol.TField NEXT_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("nextToken", org.apache.thrift.protocol.TType.STRUCT, (short)5);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new prestoGetSplits_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new prestoGetSplits_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable PrestoThriftSchemaTableName schemaTableName; // required
    public @org.apache.thrift.annotation.Nullable PrestoThriftNullableColumnSet desiredColumns; // required
    public @org.apache.thrift.annotation.Nullable PrestoThriftTupleDomain outputConstraint; // required
    public int maxSplitCount; // required
    public @org.apache.thrift.annotation.Nullable PrestoThriftNullableToken nextToken; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SCHEMA_TABLE_NAME((short)1, "schemaTableName"),
      DESIRED_COLUMNS((short)2, "desiredColumns"),
      OUTPUT_CONSTRAINT((short)3, "outputConstraint"),
      MAX_SPLIT_COUNT((short)4, "maxSplitCount"),
      NEXT_TOKEN((short)5, "nextToken");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SCHEMA_TABLE_NAME
            return SCHEMA_TABLE_NAME;
          case 2: // DESIRED_COLUMNS
            return DESIRED_COLUMNS;
          case 3: // OUTPUT_CONSTRAINT
            return OUTPUT_CONSTRAINT;
          case 4: // MAX_SPLIT_COUNT
            return MAX_SPLIT_COUNT;
          case 5: // NEXT_TOKEN
            return NEXT_TOKEN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __MAXSPLITCOUNT_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SCHEMA_TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("schemaTableName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PrestoThriftSchemaTableName.class)));
      tmpMap.put(_Fields.DESIRED_COLUMNS, new org.apache.thrift.meta_data.FieldMetaData("desiredColumns", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PrestoThriftNullableColumnSet.class)));
      tmpMap.put(_Fields.OUTPUT_CONSTRAINT, new org.apache.thrift.meta_data.FieldMetaData("outputConstraint", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PrestoThriftTupleDomain.class)));
      tmpMap.put(_Fields.MAX_SPLIT_COUNT, new org.apache.thrift.meta_data.FieldMetaData("maxSplitCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.NEXT_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("nextToken", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PrestoThriftNullableToken.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(prestoGetSplits_args.class, metaDataMap);
    }

    public prestoGetSplits_args() {
    }

    public prestoGetSplits_args(
      PrestoThriftSchemaTableName schemaTableName,
      PrestoThriftNullableColumnSet desiredColumns,
      PrestoThriftTupleDomain outputConstraint,
      int maxSplitCount,
      PrestoThriftNullableToken nextToken)
    {
      this();
      this.schemaTableName = schemaTableName;
      this.desiredColumns = desiredColumns;
      this.outputConstraint = outputConstraint;
      this.maxSplitCount = maxSplitCount;
      setMaxSplitCountIsSet(true);
      this.nextToken = nextToken;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public prestoGetSplits_args(prestoGetSplits_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetSchemaTableName()) {
        this.schemaTableName = new PrestoThriftSchemaTableName(other.schemaTableName);
      }
      if (other.isSetDesiredColumns()) {
        this.desiredColumns = new PrestoThriftNullableColumnSet(other.desiredColumns);
      }
      if (other.isSetOutputConstraint()) {
        this.outputConstraint = new PrestoThriftTupleDomain(other.outputConstraint);
      }
      this.maxSplitCount = other.maxSplitCount;
      if (other.isSetNextToken()) {
        this.nextToken = new PrestoThriftNullableToken(other.nextToken);
      }
    }

    @Override
    public prestoGetSplits_args deepCopy() {
      return new prestoGetSplits_args(this);
    }

    @Override
    public void clear() {
      this.schemaTableName = null;
      this.desiredColumns = null;
      this.outputConstraint = null;
      setMaxSplitCountIsSet(false);
      this.maxSplitCount = 0;
      this.nextToken = null;
    }

    @org.apache.thrift.annotation.Nullable
    public PrestoThriftSchemaTableName getSchemaTableName() {
      return this.schemaTableName;
    }

    public prestoGetSplits_args setSchemaTableName(@org.apache.thrift.annotation.Nullable PrestoThriftSchemaTableName schemaTableName) {
      this.schemaTableName = schemaTableName;
      return this;
    }

    public void unsetSchemaTableName() {
      this.schemaTableName = null;
    }

    /** Returns true if field schemaTableName is set (has been assigned a value) and false otherwise */
    public boolean isSetSchemaTableName() {
      return this.schemaTableName != null;
    }

    public void setSchemaTableNameIsSet(boolean value) {
      if (!value) {
        this.schemaTableName = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public PrestoThriftNullableColumnSet getDesiredColumns() {
      return this.desiredColumns;
    }

    public prestoGetSplits_args setDesiredColumns(@org.apache.thrift.annotation.Nullable PrestoThriftNullableColumnSet desiredColumns) {
      this.desiredColumns = desiredColumns;
      return this;
    }

    public void unsetDesiredColumns() {
      this.desiredColumns = null;
    }

    /** Returns true if field desiredColumns is set (has been assigned a value) and false otherwise */
    public boolean isSetDesiredColumns() {
      return this.desiredColumns != null;
    }

    public void setDesiredColumnsIsSet(boolean value) {
      if (!value) {
        this.desiredColumns = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public PrestoThriftTupleDomain getOutputConstraint() {
      return this.outputConstraint;
    }

    public prestoGetSplits_args setOutputConstraint(@org.apache.thrift.annotation.Nullable PrestoThriftTupleDomain outputConstraint) {
      this.outputConstraint = outputConstraint;
      return this;
    }

    public void unsetOutputConstraint() {
      this.outputConstraint = null;
    }

    /** Returns true if field outputConstraint is set (has been assigned a value) and false otherwise */
    public boolean isSetOutputConstraint() {
      return this.outputConstraint != null;
    }

    public void setOutputConstraintIsSet(boolean value) {
      if (!value) {
        this.outputConstraint = null;
      }
    }

    public int getMaxSplitCount() {
      return this.maxSplitCount;
    }

    public prestoGetSplits_args setMaxSplitCount(int maxSplitCount) {
      this.maxSplitCount = maxSplitCount;
      setMaxSplitCountIsSet(true);
      return this;
    }

    public void unsetMaxSplitCount() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MAXSPLITCOUNT_ISSET_ID);
    }

    /** Returns true if field maxSplitCount is set (has been assigned a value) and false otherwise */
    public boolean isSetMaxSplitCount() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MAXSPLITCOUNT_ISSET_ID);
    }

    public void setMaxSplitCountIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MAXSPLITCOUNT_ISSET_ID, value);
    }

    @org.apache.thrift.annotation.Nullable
    public PrestoThriftNullableToken getNextToken() {
      return this.nextToken;
    }

    public prestoGetSplits_args setNextToken(@org.apache.thrift.annotation.Nullable PrestoThriftNullableToken nextToken) {
      this.nextToken = nextToken;
      return this;
    }

    public void unsetNextToken() {
      this.nextToken = null;
    }

    /** Returns true if field nextToken is set (has been assigned a value) and false otherwise */
    public boolean isSetNextToken() {
      return this.nextToken != null;
    }

    public void setNextTokenIsSet(boolean value) {
      if (!value) {
        this.nextToken = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SCHEMA_TABLE_NAME:
        if (value == null) {
          unsetSchemaTableName();
        } else {
          setSchemaTableName((PrestoThriftSchemaTableName)value);
        }
        break;

      case DESIRED_COLUMNS:
        if (value == null) {
          unsetDesiredColumns();
        } else {
          setDesiredColumns((PrestoThriftNullableColumnSet)value);
        }
        break;

      case OUTPUT_CONSTRAINT:
        if (value == null) {
          unsetOutputConstraint();
        } else {
          setOutputConstraint((PrestoThriftTupleDomain)value);
        }
        break;

      case MAX_SPLIT_COUNT:
        if (value == null) {
          unsetMaxSplitCount();
        } else {
          setMaxSplitCount((java.lang.Integer)value);
        }
        break;

      case NEXT_TOKEN:
        if (value == null) {
          unsetNextToken();
        } else {
          setNextToken((PrestoThriftNullableToken)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SCHEMA_TABLE_NAME:
        return getSchemaTableName();

      case DESIRED_COLUMNS:
        return getDesiredColumns();

      case OUTPUT_CONSTRAINT:
        return getOutputConstraint();

      case MAX_SPLIT_COUNT:
        return getMaxSplitCount();

      case NEXT_TOKEN:
        return getNextToken();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SCHEMA_TABLE_NAME:
        return isSetSchemaTableName();
      case DESIRED_COLUMNS:
        return isSetDesiredColumns();
      case OUTPUT_CONSTRAINT:
        return isSetOutputConstraint();
      case MAX_SPLIT_COUNT:
        return isSetMaxSplitCount();
      case NEXT_TOKEN:
        return isSetNextToken();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof prestoGetSplits_args)
        return this.equals((prestoGetSplits_args)that);
      return false;
    }

    public boolean equals(prestoGetSplits_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_schemaTableName = true && this.isSetSchemaTableName();
      boolean that_present_schemaTableName = true && that.isSetSchemaTableName();
      if (this_present_schemaTableName || that_present_schemaTableName) {
        if (!(this_present_schemaTableName && that_present_schemaTableName))
          return false;
        if (!this.schemaTableName.equals(that.schemaTableName))
          return false;
      }

      boolean this_present_desiredColumns = true && this.isSetDesiredColumns();
      boolean that_present_desiredColumns = true && that.isSetDesiredColumns();
      if (this_present_desiredColumns || that_present_desiredColumns) {
        if (!(this_present_desiredColumns && that_present_desiredColumns))
          return false;
        if (!this.desiredColumns.equals(that.desiredColumns))
          return false;
      }

      boolean this_present_outputConstraint = true && this.isSetOutputConstraint();
      boolean that_present_outputConstraint = true && that.isSetOutputConstraint();
      if (this_present_outputConstraint || that_present_outputConstraint) {
        if (!(this_present_outputConstraint && that_present_outputConstraint))
          return false;
        if (!this.outputConstraint.equals(that.outputConstraint))
          return false;
      }

      boolean this_present_maxSplitCount = true;
      boolean that_present_maxSplitCount = true;
      if (this_present_maxSplitCount || that_present_maxSplitCount) {
        if (!(this_present_maxSplitCount && that_present_maxSplitCount))
          return false;
        if (this.maxSplitCount != that.maxSplitCount)
          return false;
      }

      boolean this_present_nextToken = true && this.isSetNextToken();
      boolean that_present_nextToken = true && that.isSetNextToken();
      if (this_present_nextToken || that_present_nextToken) {
        if (!(this_present_nextToken && that_present_nextToken))
          return false;
        if (!this.nextToken.equals(that.nextToken))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSchemaTableName()) ? 131071 : 524287);
      if (isSetSchemaTableName())
        hashCode = hashCode * 8191 + schemaTableName.hashCode();

      hashCode = hashCode * 8191 + ((isSetDesiredColumns()) ? 131071 : 524287);
      if (isSetDesiredColumns())
        hashCode = hashCode * 8191 + desiredColumns.hashCode();

      hashCode = hashCode * 8191 + ((isSetOutputConstraint()) ? 131071 : 524287);
      if (isSetOutputConstraint())
        hashCode = hashCode * 8191 + outputConstraint.hashCode();

      hashCode = hashCode * 8191 + maxSplitCount;

      hashCode = hashCode * 8191 + ((isSetNextToken()) ? 131071 : 524287);
      if (isSetNextToken())
        hashCode = hashCode * 8191 + nextToken.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(prestoGetSplits_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSchemaTableName(), other.isSetSchemaTableName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSchemaTableName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schemaTableName, other.schemaTableName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetDesiredColumns(), other.isSetDesiredColumns());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDesiredColumns()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.desiredColumns, other.desiredColumns);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetOutputConstraint(), other.isSetOutputConstraint());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOutputConstraint()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outputConstraint, other.outputConstraint);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetMaxSplitCount(), other.isSetMaxSplitCount());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMaxSplitCount()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxSplitCount, other.maxSplitCount);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetNextToken(), other.isSetNextToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNextToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nextToken, other.nextToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("prestoGetSplits_args(");
      boolean first = true;

      sb.append("schemaTableName:");
      if (this.schemaTableName == null) {
        sb.append("null");
      } else {
        sb.append(this.schemaTableName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("desiredColumns:");
      if (this.desiredColumns == null) {
        sb.append("null");
      } else {
        sb.append(this.desiredColumns);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("outputConstraint:");
      if (this.outputConstraint == null) {
        sb.append("null");
      } else {
        sb.append(this.outputConstraint);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("maxSplitCount:");
      sb.append(this.maxSplitCount);
      first = false;
      if (!first) sb.append(", ");
      sb.append("nextToken:");
      if (this.nextToken == null) {
        sb.append("null");
      } else {
        sb.append(this.nextToken);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (schemaTableName != null) {
        schemaTableName.validate();
      }
      if (desiredColumns != null) {
        desiredColumns.validate();
      }
      if (outputConstraint != null) {
        outputConstraint.validate();
      }
      if (nextToken != null) {
        nextToken.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class prestoGetSplits_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public prestoGetSplits_argsStandardScheme getScheme() {
        return new prestoGetSplits_argsStandardScheme();
      }
    }

    private static class prestoGetSplits_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<prestoGetSplits_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, prestoGetSplits_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SCHEMA_TABLE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.schemaTableName = new PrestoThriftSchemaTableName();
                struct.schemaTableName.read(iprot);
                struct.setSchemaTableNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DESIRED_COLUMNS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.desiredColumns = new PrestoThriftNullableColumnSet();
                struct.desiredColumns.read(iprot);
                struct.setDesiredColumnsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // OUTPUT_CONSTRAINT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.outputConstraint = new PrestoThriftTupleDomain();
                struct.outputConstraint.read(iprot);
                struct.setOutputConstraintIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // MAX_SPLIT_COUNT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.maxSplitCount = iprot.readI32();
                struct.setMaxSplitCountIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // NEXT_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.nextToken = new PrestoThriftNullableToken();
                struct.nextToken.read(iprot);
                struct.setNextTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, prestoGetSplits_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.schemaTableName != null) {
          oprot.writeFieldBegin(SCHEMA_TABLE_NAME_FIELD_DESC);
          struct.schemaTableName.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.desiredColumns != null) {
          oprot.writeFieldBegin(DESIRED_COLUMNS_FIELD_DESC);
          struct.desiredColumns.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.outputConstraint != null) {
          oprot.writeFieldBegin(OUTPUT_CONSTRAINT_FIELD_DESC);
          struct.outputConstraint.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(MAX_SPLIT_COUNT_FIELD_DESC);
        oprot.writeI32(struct.maxSplitCount);
        oprot.writeFieldEnd();
        if (struct.nextToken != null) {
          oprot.writeFieldBegin(NEXT_TOKEN_FIELD_DESC);
          struct.nextToken.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class prestoGetSplits_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public prestoGetSplits_argsTupleScheme getScheme() {
        return new prestoGetSplits_argsTupleScheme();
      }
    }

    private static class prestoGetSplits_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<prestoGetSplits_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, prestoGetSplits_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSchemaTableName()) {
          optionals.set(0);
        }
        if (struct.isSetDesiredColumns()) {
          optionals.set(1);
        }
        if (struct.isSetOutputConstraint()) {
          optionals.set(2);
        }
        if (struct.isSetMaxSplitCount()) {
          optionals.set(3);
        }
        if (struct.isSetNextToken()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetSchemaTableName()) {
          struct.schemaTableName.write(oprot);
        }
        if (struct.isSetDesiredColumns()) {
          struct.desiredColumns.write(oprot);
        }
        if (struct.isSetOutputConstraint()) {
          struct.outputConstraint.write(oprot);
        }
        if (struct.isSetMaxSplitCount()) {
          oprot.writeI32(struct.maxSplitCount);
        }
        if (struct.isSetNextToken()) {
          struct.nextToken.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, prestoGetSplits_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.schemaTableName = new PrestoThriftSchemaTableName();
          struct.schemaTableName.read(iprot);
          struct.setSchemaTableNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.desiredColumns = new PrestoThriftNullableColumnSet();
          struct.desiredColumns.read(iprot);
          struct.setDesiredColumnsIsSet(true);
        }
        if (incoming.get(2)) {
          struct.outputConstraint = new PrestoThriftTupleDomain();
          struct.outputConstraint.read(iprot);
          struct.setOutputConstraintIsSet(true);
        }
        if (incoming.get(3)) {
          struct.maxSplitCount = iprot.readI32();
          struct.setMaxSplitCountIsSet(true);
        }
        if (incoming.get(4)) {
          struct.nextToken = new PrestoThriftNullableToken();
          struct.nextToken.read(iprot);
          struct.setNextTokenIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class prestoGetSplits_result implements org.apache.thrift.TBase<prestoGetSplits_result, prestoGetSplits_result._Fields>, java.io.Serializable, Cloneable, Comparable<prestoGetSplits_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("prestoGetSplits_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField EX1_FIELD_DESC = new org.apache.thrift.protocol.TField("ex1", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new prestoGetSplits_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new prestoGetSplits_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable PrestoThriftSplitBatch success; // required
    public @org.apache.thrift.annotation.Nullable PrestoThriftServiceException ex1; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX1((short)1, "ex1");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX1
            return EX1;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PrestoThriftSplitBatch.class)));
      tmpMap.put(_Fields.EX1, new org.apache.thrift.meta_data.FieldMetaData("ex1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PrestoThriftServiceException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(prestoGetSplits_result.class, metaDataMap);
    }

    public prestoGetSplits_result() {
    }

    public prestoGetSplits_result(
      PrestoThriftSplitBatch success,
      PrestoThriftServiceException ex1)
    {
      this();
      this.success = success;
      this.ex1 = ex1;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public prestoGetSplits_result(prestoGetSplits_result other) {
      if (other.isSetSuccess()) {
        this.success = new PrestoThriftSplitBatch(other.success);
      }
      if (other.isSetEx1()) {
        this.ex1 = new PrestoThriftServiceException(other.ex1);
      }
    }

    @Override
    public prestoGetSplits_result deepCopy() {
      return new prestoGetSplits_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex1 = null;
    }

    @org.apache.thrift.annotation.Nullable
    public PrestoThriftSplitBatch getSuccess() {
      return this.success;
    }

    public prestoGetSplits_result setSuccess(@org.apache.thrift.annotation.Nullable PrestoThriftSplitBatch success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public PrestoThriftServiceException getEx1() {
      return this.ex1;
    }

    public prestoGetSplits_result setEx1(@org.apache.thrift.annotation.Nullable PrestoThriftServiceException ex1) {
      this.ex1 = ex1;
      return this;
    }

    public void unsetEx1() {
      this.ex1 = null;
    }

    /** Returns true if field ex1 is set (has been assigned a value) and false otherwise */
    public boolean isSetEx1() {
      return this.ex1 != null;
    }

    public void setEx1IsSet(boolean value) {
      if (!value) {
        this.ex1 = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((PrestoThriftSplitBatch)value);
        }
        break;

      case EX1:
        if (value == null) {
          unsetEx1();
        } else {
          setEx1((PrestoThriftServiceException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX1:
        return getEx1();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX1:
        return isSetEx1();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof prestoGetSplits_result)
        return this.equals((prestoGetSplits_result)that);
      return false;
    }

    public boolean equals(prestoGetSplits_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex1 = true && this.isSetEx1();
      boolean that_present_ex1 = true && that.isSetEx1();
      if (this_present_ex1 || that_present_ex1) {
        if (!(this_present_ex1 && that_present_ex1))
          return false;
        if (!this.ex1.equals(that.ex1))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetEx1()) ? 131071 : 524287);
      if (isSetEx1())
        hashCode = hashCode * 8191 + ex1.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(prestoGetSplits_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetEx1(), other.isSetEx1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex1, other.ex1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("prestoGetSplits_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex1:");
      if (this.ex1 == null) {
        sb.append("null");
      } else {
        sb.append(this.ex1);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class prestoGetSplits_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public prestoGetSplits_resultStandardScheme getScheme() {
        return new prestoGetSplits_resultStandardScheme();
      }
    }

    private static class prestoGetSplits_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<prestoGetSplits_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, prestoGetSplits_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new PrestoThriftSplitBatch();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex1 = new PrestoThriftServiceException();
                struct.ex1.read(iprot);
                struct.setEx1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, prestoGetSplits_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ex1 != null) {
          oprot.writeFieldBegin(EX1_FIELD_DESC);
          struct.ex1.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class prestoGetSplits_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public prestoGetSplits_resultTupleScheme getScheme() {
        return new prestoGetSplits_resultTupleScheme();
      }
    }

    private static class prestoGetSplits_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<prestoGetSplits_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, prestoGetSplits_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx1()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetEx1()) {
          struct.ex1.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, prestoGetSplits_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new PrestoThriftSplitBatch();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex1 = new PrestoThriftServiceException();
          struct.ex1.read(iprot);
          struct.setEx1IsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class prestoGetIndexSplits_args implements org.apache.thrift.TBase<prestoGetIndexSplits_args, prestoGetIndexSplits_args._Fields>, java.io.Serializable, Cloneable, Comparable<prestoGetIndexSplits_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("prestoGetIndexSplits_args");

    private static final org.apache.thrift.protocol.TField SCHEMA_TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("schemaTableName", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField INDEX_COLUMN_NAMES_FIELD_DESC = new org.apache.thrift.protocol.TField("indexColumnNames", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField OUTPUT_COLUMN_NAMES_FIELD_DESC = new org.apache.thrift.protocol.TField("outputColumnNames", org.apache.thrift.protocol.TType.LIST, (short)3);
    private static final org.apache.thrift.protocol.TField KEYS_FIELD_DESC = new org.apache.thrift.protocol.TField("keys", org.apache.thrift.protocol.TType.STRUCT, (short)4);
    private static final org.apache.thrift.protocol.TField OUTPUT_CONSTRAINT_FIELD_DESC = new org.apache.thrift.protocol.TField("outputConstraint", org.apache.thrift.protocol.TType.STRUCT, (short)5);
    private static final org.apache.thrift.protocol.TField MAX_SPLIT_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("maxSplitCount", org.apache.thrift.protocol.TType.I32, (short)6);
    private static final org.apache.thrift.protocol.TField NEXT_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("nextToken", org.apache.thrift.protocol.TType.STRUCT, (short)7);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new prestoGetIndexSplits_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new prestoGetIndexSplits_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable PrestoThriftSchemaTableName schemaTableName; // required
    public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> indexColumnNames; // required
    public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> outputColumnNames; // required
    public @org.apache.thrift.annotation.Nullable PrestoThriftPageResult keys; // required
    public @org.apache.thrift.annotation.Nullable PrestoThriftTupleDomain outputConstraint; // required
    public int maxSplitCount; // required
    public @org.apache.thrift.annotation.Nullable PrestoThriftNullableToken nextToken; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SCHEMA_TABLE_NAME((short)1, "schemaTableName"),
      INDEX_COLUMN_NAMES((short)2, "indexColumnNames"),
      OUTPUT_COLUMN_NAMES((short)3, "outputColumnNames"),
      KEYS((short)4, "keys"),
      OUTPUT_CONSTRAINT((short)5, "outputConstraint"),
      MAX_SPLIT_COUNT((short)6, "maxSplitCount"),
      NEXT_TOKEN((short)7, "nextToken");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SCHEMA_TABLE_NAME
            return SCHEMA_TABLE_NAME;
          case 2: // INDEX_COLUMN_NAMES
            return INDEX_COLUMN_NAMES;
          case 3: // OUTPUT_COLUMN_NAMES
            return OUTPUT_COLUMN_NAMES;
          case 4: // KEYS
            return KEYS;
          case 5: // OUTPUT_CONSTRAINT
            return OUTPUT_CONSTRAINT;
          case 6: // MAX_SPLIT_COUNT
            return MAX_SPLIT_COUNT;
          case 7: // NEXT_TOKEN
            return NEXT_TOKEN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __MAXSPLITCOUNT_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SCHEMA_TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("schemaTableName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PrestoThriftSchemaTableName.class)));
      tmpMap.put(_Fields.INDEX_COLUMN_NAMES, new org.apache.thrift.meta_data.FieldMetaData("indexColumnNames", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.OUTPUT_COLUMN_NAMES, new org.apache.thrift.meta_data.FieldMetaData("outputColumnNames", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.KEYS, new org.apache.thrift.meta_data.FieldMetaData("keys", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PrestoThriftPageResult.class)));
      tmpMap.put(_Fields.OUTPUT_CONSTRAINT, new org.apache.thrift.meta_data.FieldMetaData("outputConstraint", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PrestoThriftTupleDomain.class)));
      tmpMap.put(_Fields.MAX_SPLIT_COUNT, new org.apache.thrift.meta_data.FieldMetaData("maxSplitCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.NEXT_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("nextToken", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PrestoThriftNullableToken.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(prestoGetIndexSplits_args.class, metaDataMap);
    }

    public prestoGetIndexSplits_args() {
    }

    public prestoGetIndexSplits_args(
      PrestoThriftSchemaTableName schemaTableName,
      java.util.List<java.lang.String> indexColumnNames,
      java.util.List<java.lang.String> outputColumnNames,
      PrestoThriftPageResult keys,
      PrestoThriftTupleDomain outputConstraint,
      int maxSplitCount,
      PrestoThriftNullableToken nextToken)
    {
      this();
      this.schemaTableName = schemaTableName;
      this.indexColumnNames = indexColumnNames;
      this.outputColumnNames = outputColumnNames;
      this.keys = keys;
      this.outputConstraint = outputConstraint;
      this.maxSplitCount = maxSplitCount;
      setMaxSplitCountIsSet(true);
      this.nextToken = nextToken;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public prestoGetIndexSplits_args(prestoGetIndexSplits_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetSchemaTableName()) {
        this.schemaTableName = new PrestoThriftSchemaTableName(other.schemaTableName);
      }
      if (other.isSetIndexColumnNames()) {
        java.util.List<java.lang.String> __this__indexColumnNames = new java.util.ArrayList<java.lang.String>(other.indexColumnNames);
        this.indexColumnNames = __this__indexColumnNames;
      }
      if (other.isSetOutputColumnNames()) {
        java.util.List<java.lang.String> __this__outputColumnNames = new java.util.ArrayList<java.lang.String>(other.outputColumnNames);
        this.outputColumnNames = __this__outputColumnNames;
      }
      if (other.isSetKeys()) {
        this.keys = new PrestoThriftPageResult(other.keys);
      }
      if (other.isSetOutputConstraint()) {
        this.outputConstraint = new PrestoThriftTupleDomain(other.outputConstraint);
      }
      this.maxSplitCount = other.maxSplitCount;
      if (other.isSetNextToken()) {
        this.nextToken = new PrestoThriftNullableToken(other.nextToken);
      }
    }

    @Override
    public prestoGetIndexSplits_args deepCopy() {
      return new prestoGetIndexSplits_args(this);
    }

    @Override
    public void clear() {
      this.schemaTableName = null;
      this.indexColumnNames = null;
      this.outputColumnNames = null;
      this.keys = null;
      this.outputConstraint = null;
      setMaxSplitCountIsSet(false);
      this.maxSplitCount = 0;
      this.nextToken = null;
    }

    @org.apache.thrift.annotation.Nullable
    public PrestoThriftSchemaTableName getSchemaTableName() {
      return this.schemaTableName;
    }

    public prestoGetIndexSplits_args setSchemaTableName(@org.apache.thrift.annotation.Nullable PrestoThriftSchemaTableName schemaTableName) {
      this.schemaTableName = schemaTableName;
      return this;
    }

    public void unsetSchemaTableName() {
      this.schemaTableName = null;
    }

    /** Returns true if field schemaTableName is set (has been assigned a value) and false otherwise */
    public boolean isSetSchemaTableName() {
      return this.schemaTableName != null;
    }

    public void setSchemaTableNameIsSet(boolean value) {
      if (!value) {
        this.schemaTableName = null;
      }
    }

    public int getIndexColumnNamesSize() {
      return (this.indexColumnNames == null) ? 0 : this.indexColumnNames.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<java.lang.String> getIndexColumnNamesIterator() {
      return (this.indexColumnNames == null) ? null : this.indexColumnNames.iterator();
    }

    public void addToIndexColumnNames(java.lang.String elem) {
      if (this.indexColumnNames == null) {
        this.indexColumnNames = new java.util.ArrayList<java.lang.String>();
      }
      this.indexColumnNames.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<java.lang.String> getIndexColumnNames() {
      return this.indexColumnNames;
    }

    public prestoGetIndexSplits_args setIndexColumnNames(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> indexColumnNames) {
      this.indexColumnNames = indexColumnNames;
      return this;
    }

    public void unsetIndexColumnNames() {
      this.indexColumnNames = null;
    }

    /** Returns true if field indexColumnNames is set (has been assigned a value) and false otherwise */
    public boolean isSetIndexColumnNames() {
      return this.indexColumnNames != null;
    }

    public void setIndexColumnNamesIsSet(boolean value) {
      if (!value) {
        this.indexColumnNames = null;
      }
    }

    public int getOutputColumnNamesSize() {
      return (this.outputColumnNames == null) ? 0 : this.outputColumnNames.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<java.lang.String> getOutputColumnNamesIterator() {
      return (this.outputColumnNames == null) ? null : this.outputColumnNames.iterator();
    }

    public void addToOutputColumnNames(java.lang.String elem) {
      if (this.outputColumnNames == null) {
        this.outputColumnNames = new java.util.ArrayList<java.lang.String>();
      }
      this.outputColumnNames.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<java.lang.String> getOutputColumnNames() {
      return this.outputColumnNames;
    }

    public prestoGetIndexSplits_args setOutputColumnNames(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> outputColumnNames) {
      this.outputColumnNames = outputColumnNames;
      return this;
    }

    public void unsetOutputColumnNames() {
      this.outputColumnNames = null;
    }

    /** Returns true if field outputColumnNames is set (has been assigned a value) and false otherwise */
    public boolean isSetOutputColumnNames() {
      return this.outputColumnNames != null;
    }

    public void setOutputColumnNamesIsSet(boolean value) {
      if (!value) {
        this.outputColumnNames = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public PrestoThriftPageResult getKeys() {
      return this.keys;
    }

    public prestoGetIndexSplits_args setKeys(@org.apache.thrift.annotation.Nullable PrestoThriftPageResult keys) {
      this.keys = keys;
      return this;
    }

    public void unsetKeys() {
      this.keys = null;
    }

    /** Returns true if field keys is set (has been assigned a value) and false otherwise */
    public boolean isSetKeys() {
      return this.keys != null;
    }

    public void setKeysIsSet(boolean value) {
      if (!value) {
        this.keys = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public PrestoThriftTupleDomain getOutputConstraint() {
      return this.outputConstraint;
    }

    public prestoGetIndexSplits_args setOutputConstraint(@org.apache.thrift.annotation.Nullable PrestoThriftTupleDomain outputConstraint) {
      this.outputConstraint = outputConstraint;
      return this;
    }

    public void unsetOutputConstraint() {
      this.outputConstraint = null;
    }

    /** Returns true if field outputConstraint is set (has been assigned a value) and false otherwise */
    public boolean isSetOutputConstraint() {
      return this.outputConstraint != null;
    }

    public void setOutputConstraintIsSet(boolean value) {
      if (!value) {
        this.outputConstraint = null;
      }
    }

    public int getMaxSplitCount() {
      return this.maxSplitCount;
    }

    public prestoGetIndexSplits_args setMaxSplitCount(int maxSplitCount) {
      this.maxSplitCount = maxSplitCount;
      setMaxSplitCountIsSet(true);
      return this;
    }

    public void unsetMaxSplitCount() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MAXSPLITCOUNT_ISSET_ID);
    }

    /** Returns true if field maxSplitCount is set (has been assigned a value) and false otherwise */
    public boolean isSetMaxSplitCount() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MAXSPLITCOUNT_ISSET_ID);
    }

    public void setMaxSplitCountIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MAXSPLITCOUNT_ISSET_ID, value);
    }

    @org.apache.thrift.annotation.Nullable
    public PrestoThriftNullableToken getNextToken() {
      return this.nextToken;
    }

    public prestoGetIndexSplits_args setNextToken(@org.apache.thrift.annotation.Nullable PrestoThriftNullableToken nextToken) {
      this.nextToken = nextToken;
      return this;
    }

    public void unsetNextToken() {
      this.nextToken = null;
    }

    /** Returns true if field nextToken is set (has been assigned a value) and false otherwise */
    public boolean isSetNextToken() {
      return this.nextToken != null;
    }

    public void setNextTokenIsSet(boolean value) {
      if (!value) {
        this.nextToken = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SCHEMA_TABLE_NAME:
        if (value == null) {
          unsetSchemaTableName();
        } else {
          setSchemaTableName((PrestoThriftSchemaTableName)value);
        }
        break;

      case INDEX_COLUMN_NAMES:
        if (value == null) {
          unsetIndexColumnNames();
        } else {
          setIndexColumnNames((java.util.List<java.lang.String>)value);
        }
        break;

      case OUTPUT_COLUMN_NAMES:
        if (value == null) {
          unsetOutputColumnNames();
        } else {
          setOutputColumnNames((java.util.List<java.lang.String>)value);
        }
        break;

      case KEYS:
        if (value == null) {
          unsetKeys();
        } else {
          setKeys((PrestoThriftPageResult)value);
        }
        break;

      case OUTPUT_CONSTRAINT:
        if (value == null) {
          unsetOutputConstraint();
        } else {
          setOutputConstraint((PrestoThriftTupleDomain)value);
        }
        break;

      case MAX_SPLIT_COUNT:
        if (value == null) {
          unsetMaxSplitCount();
        } else {
          setMaxSplitCount((java.lang.Integer)value);
        }
        break;

      case NEXT_TOKEN:
        if (value == null) {
          unsetNextToken();
        } else {
          setNextToken((PrestoThriftNullableToken)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SCHEMA_TABLE_NAME:
        return getSchemaTableName();

      case INDEX_COLUMN_NAMES:
        return getIndexColumnNames();

      case OUTPUT_COLUMN_NAMES:
        return getOutputColumnNames();

      case KEYS:
        return getKeys();

      case OUTPUT_CONSTRAINT:
        return getOutputConstraint();

      case MAX_SPLIT_COUNT:
        return getMaxSplitCount();

      case NEXT_TOKEN:
        return getNextToken();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SCHEMA_TABLE_NAME:
        return isSetSchemaTableName();
      case INDEX_COLUMN_NAMES:
        return isSetIndexColumnNames();
      case OUTPUT_COLUMN_NAMES:
        return isSetOutputColumnNames();
      case KEYS:
        return isSetKeys();
      case OUTPUT_CONSTRAINT:
        return isSetOutputConstraint();
      case MAX_SPLIT_COUNT:
        return isSetMaxSplitCount();
      case NEXT_TOKEN:
        return isSetNextToken();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof prestoGetIndexSplits_args)
        return this.equals((prestoGetIndexSplits_args)that);
      return false;
    }

    public boolean equals(prestoGetIndexSplits_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_schemaTableName = true && this.isSetSchemaTableName();
      boolean that_present_schemaTableName = true && that.isSetSchemaTableName();
      if (this_present_schemaTableName || that_present_schemaTableName) {
        if (!(this_present_schemaTableName && that_present_schemaTableName))
          return false;
        if (!this.schemaTableName.equals(that.schemaTableName))
          return false;
      }

      boolean this_present_indexColumnNames = true && this.isSetIndexColumnNames();
      boolean that_present_indexColumnNames = true && that.isSetIndexColumnNames();
      if (this_present_indexColumnNames || that_present_indexColumnNames) {
        if (!(this_present_indexColumnNames && that_present_indexColumnNames))
          return false;
        if (!this.indexColumnNames.equals(that.indexColumnNames))
          return false;
      }

      boolean this_present_outputColumnNames = true && this.isSetOutputColumnNames();
      boolean that_present_outputColumnNames = true && that.isSetOutputColumnNames();
      if (this_present_outputColumnNames || that_present_outputColumnNames) {
        if (!(this_present_outputColumnNames && that_present_outputColumnNames))
          return false;
        if (!this.outputColumnNames.equals(that.outputColumnNames))
          return false;
      }

      boolean this_present_keys = true && this.isSetKeys();
      boolean that_present_keys = true && that.isSetKeys();
      if (this_present_keys || that_present_keys) {
        if (!(this_present_keys && that_present_keys))
          return false;
        if (!this.keys.equals(that.keys))
          return false;
      }

      boolean this_present_outputConstraint = true && this.isSetOutputConstraint();
      boolean that_present_outputConstraint = true && that.isSetOutputConstraint();
      if (this_present_outputConstraint || that_present_outputConstraint) {
        if (!(this_present_outputConstraint && that_present_outputConstraint))
          return false;
        if (!this.outputConstraint.equals(that.outputConstraint))
          return false;
      }

      boolean this_present_maxSplitCount = true;
      boolean that_present_maxSplitCount = true;
      if (this_present_maxSplitCount || that_present_maxSplitCount) {
        if (!(this_present_maxSplitCount && that_present_maxSplitCount))
          return false;
        if (this.maxSplitCount != that.maxSplitCount)
          return false;
      }

      boolean this_present_nextToken = true && this.isSetNextToken();
      boolean that_present_nextToken = true && that.isSetNextToken();
      if (this_present_nextToken || that_present_nextToken) {
        if (!(this_present_nextToken && that_present_nextToken))
          return false;
        if (!this.nextToken.equals(that.nextToken))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSchemaTableName()) ? 131071 : 524287);
      if (isSetSchemaTableName())
        hashCode = hashCode * 8191 + schemaTableName.hashCode();

      hashCode = hashCode * 8191 + ((isSetIndexColumnNames()) ? 131071 : 524287);
      if (isSetIndexColumnNames())
        hashCode = hashCode * 8191 + indexColumnNames.hashCode();

      hashCode = hashCode * 8191 + ((isSetOutputColumnNames()) ? 131071 : 524287);
      if (isSetOutputColumnNames())
        hashCode = hashCode * 8191 + outputColumnNames.hashCode();

      hashCode = hashCode * 8191 + ((isSetKeys()) ? 131071 : 524287);
      if (isSetKeys())
        hashCode = hashCode * 8191 + keys.hashCode();

      hashCode = hashCode * 8191 + ((isSetOutputConstraint()) ? 131071 : 524287);
      if (isSetOutputConstraint())
        hashCode = hashCode * 8191 + outputConstraint.hashCode();

      hashCode = hashCode * 8191 + maxSplitCount;

      hashCode = hashCode * 8191 + ((isSetNextToken()) ? 131071 : 524287);
      if (isSetNextToken())
        hashCode = hashCode * 8191 + nextToken.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(prestoGetIndexSplits_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSchemaTableName(), other.isSetSchemaTableName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSchemaTableName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schemaTableName, other.schemaTableName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetIndexColumnNames(), other.isSetIndexColumnNames());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIndexColumnNames()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.indexColumnNames, other.indexColumnNames);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetOutputColumnNames(), other.isSetOutputColumnNames());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOutputColumnNames()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outputColumnNames, other.outputColumnNames);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetKeys(), other.isSetKeys());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKeys()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.keys, other.keys);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetOutputConstraint(), other.isSetOutputConstraint());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOutputConstraint()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outputConstraint, other.outputConstraint);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetMaxSplitCount(), other.isSetMaxSplitCount());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMaxSplitCount()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxSplitCount, other.maxSplitCount);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetNextToken(), other.isSetNextToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNextToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nextToken, other.nextToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("prestoGetIndexSplits_args(");
      boolean first = true;

      sb.append("schemaTableName:");
      if (this.schemaTableName == null) {
        sb.append("null");
      } else {
        sb.append(this.schemaTableName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("indexColumnNames:");
      if (this.indexColumnNames == null) {
        sb.append("null");
      } else {
        sb.append(this.indexColumnNames);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("outputColumnNames:");
      if (this.outputColumnNames == null) {
        sb.append("null");
      } else {
        sb.append(this.outputColumnNames);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("keys:");
      if (this.keys == null) {
        sb.append("null");
      } else {
        sb.append(this.keys);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("outputConstraint:");
      if (this.outputConstraint == null) {
        sb.append("null");
      } else {
        sb.append(this.outputConstraint);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("maxSplitCount:");
      sb.append(this.maxSplitCount);
      first = false;
      if (!first) sb.append(", ");
      sb.append("nextToken:");
      if (this.nextToken == null) {
        sb.append("null");
      } else {
        sb.append(this.nextToken);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (schemaTableName != null) {
        schemaTableName.validate();
      }
      if (keys != null) {
        keys.validate();
      }
      if (outputConstraint != null) {
        outputConstraint.validate();
      }
      if (nextToken != null) {
        nextToken.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class prestoGetIndexSplits_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public prestoGetIndexSplits_argsStandardScheme getScheme() {
        return new prestoGetIndexSplits_argsStandardScheme();
      }
    }

    private static class prestoGetIndexSplits_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<prestoGetIndexSplits_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, prestoGetIndexSplits_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SCHEMA_TABLE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.schemaTableName = new PrestoThriftSchemaTableName();
                struct.schemaTableName.read(iprot);
                struct.setSchemaTableNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // INDEX_COLUMN_NAMES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list258 = iprot.readListBegin();
                  struct.indexColumnNames = new java.util.ArrayList<java.lang.String>(_list258.size);
                  @org.apache.thrift.annotation.Nullable java.lang.String _elem259;
                  for (int _i260 = 0; _i260 < _list258.size; ++_i260)
                  {
                    _elem259 = iprot.readString();
                    struct.indexColumnNames.add(_elem259);
                  }
                  iprot.readListEnd();
                }
                struct.setIndexColumnNamesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // OUTPUT_COLUMN_NAMES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list261 = iprot.readListBegin();
                  struct.outputColumnNames = new java.util.ArrayList<java.lang.String>(_list261.size);
                  @org.apache.thrift.annotation.Nullable java.lang.String _elem262;
                  for (int _i263 = 0; _i263 < _list261.size; ++_i263)
                  {
                    _elem262 = iprot.readString();
                    struct.outputColumnNames.add(_elem262);
                  }
                  iprot.readListEnd();
                }
                struct.setOutputColumnNamesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // KEYS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.keys = new PrestoThriftPageResult();
                struct.keys.read(iprot);
                struct.setKeysIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // OUTPUT_CONSTRAINT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.outputConstraint = new PrestoThriftTupleDomain();
                struct.outputConstraint.read(iprot);
                struct.setOutputConstraintIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // MAX_SPLIT_COUNT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.maxSplitCount = iprot.readI32();
                struct.setMaxSplitCountIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // NEXT_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.nextToken = new PrestoThriftNullableToken();
                struct.nextToken.read(iprot);
                struct.setNextTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, prestoGetIndexSplits_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.schemaTableName != null) {
          oprot.writeFieldBegin(SCHEMA_TABLE_NAME_FIELD_DESC);
          struct.schemaTableName.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.indexColumnNames != null) {
          oprot.writeFieldBegin(INDEX_COLUMN_NAMES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.indexColumnNames.size()));
            for (java.lang.String _iter264 : struct.indexColumnNames)
            {
              oprot.writeString(_iter264);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.outputColumnNames != null) {
          oprot.writeFieldBegin(OUTPUT_COLUMN_NAMES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.outputColumnNames.size()));
            for (java.lang.String _iter265 : struct.outputColumnNames)
            {
              oprot.writeString(_iter265);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.keys != null) {
          oprot.writeFieldBegin(KEYS_FIELD_DESC);
          struct.keys.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.outputConstraint != null) {
          oprot.writeFieldBegin(OUTPUT_CONSTRAINT_FIELD_DESC);
          struct.outputConstraint.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(MAX_SPLIT_COUNT_FIELD_DESC);
        oprot.writeI32(struct.maxSplitCount);
        oprot.writeFieldEnd();
        if (struct.nextToken != null) {
          oprot.writeFieldBegin(NEXT_TOKEN_FIELD_DESC);
          struct.nextToken.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class prestoGetIndexSplits_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public prestoGetIndexSplits_argsTupleScheme getScheme() {
        return new prestoGetIndexSplits_argsTupleScheme();
      }
    }

    private static class prestoGetIndexSplits_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<prestoGetIndexSplits_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, prestoGetIndexSplits_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSchemaTableName()) {
          optionals.set(0);
        }
        if (struct.isSetIndexColumnNames()) {
          optionals.set(1);
        }
        if (struct.isSetOutputColumnNames()) {
          optionals.set(2);
        }
        if (struct.isSetKeys()) {
          optionals.set(3);
        }
        if (struct.isSetOutputConstraint()) {
          optionals.set(4);
        }
        if (struct.isSetMaxSplitCount()) {
          optionals.set(5);
        }
        if (struct.isSetNextToken()) {
          optionals.set(6);
        }
        oprot.writeBitSet(optionals, 7);
        if (struct.isSetSchemaTableName()) {
          struct.schemaTableName.write(oprot);
        }
        if (struct.isSetIndexColumnNames()) {
          {
            oprot.writeI32(struct.indexColumnNames.size());
            for (java.lang.String _iter266 : struct.indexColumnNames)
            {
              oprot.writeString(_iter266);
            }
          }
        }
        if (struct.isSetOutputColumnNames()) {
          {
            oprot.writeI32(struct.outputColumnNames.size());
            for (java.lang.String _iter267 : struct.outputColumnNames)
            {
              oprot.writeString(_iter267);
            }
          }
        }
        if (struct.isSetKeys()) {
          struct.keys.write(oprot);
        }
        if (struct.isSetOutputConstraint()) {
          struct.outputConstraint.write(oprot);
        }
        if (struct.isSetMaxSplitCount()) {
          oprot.writeI32(struct.maxSplitCount);
        }
        if (struct.isSetNextToken()) {
          struct.nextToken.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, prestoGetIndexSplits_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(7);
        if (incoming.get(0)) {
          struct.schemaTableName = new PrestoThriftSchemaTableName();
          struct.schemaTableName.read(iprot);
          struct.setSchemaTableNameIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list268 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
            struct.indexColumnNames = new java.util.ArrayList<java.lang.String>(_list268.size);
            @org.apache.thrift.annotation.Nullable java.lang.String _elem269;
            for (int _i270 = 0; _i270 < _list268.size; ++_i270)
            {
              _elem269 = iprot.readString();
              struct.indexColumnNames.add(_elem269);
            }
          }
          struct.setIndexColumnNamesIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TList _list271 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
            struct.outputColumnNames = new java.util.ArrayList<java.lang.String>(_list271.size);
            @org.apache.thrift.annotation.Nullable java.lang.String _elem272;
            for (int _i273 = 0; _i273 < _list271.size; ++_i273)
            {
              _elem272 = iprot.readString();
              struct.outputColumnNames.add(_elem272);
            }
          }
          struct.setOutputColumnNamesIsSet(true);
        }
        if (incoming.get(3)) {
          struct.keys = new PrestoThriftPageResult();
          struct.keys.read(iprot);
          struct.setKeysIsSet(true);
        }
        if (incoming.get(4)) {
          struct.outputConstraint = new PrestoThriftTupleDomain();
          struct.outputConstraint.read(iprot);
          struct.setOutputConstraintIsSet(true);
        }
        if (incoming.get(5)) {
          struct.maxSplitCount = iprot.readI32();
          struct.setMaxSplitCountIsSet(true);
        }
        if (incoming.get(6)) {
          struct.nextToken = new PrestoThriftNullableToken();
          struct.nextToken.read(iprot);
          struct.setNextTokenIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class prestoGetIndexSplits_result implements org.apache.thrift.TBase<prestoGetIndexSplits_result, prestoGetIndexSplits_result._Fields>, java.io.Serializable, Cloneable, Comparable<prestoGetIndexSplits_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("prestoGetIndexSplits_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField EX1_FIELD_DESC = new org.apache.thrift.protocol.TField("ex1", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new prestoGetIndexSplits_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new prestoGetIndexSplits_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable PrestoThriftSplitBatch success; // required
    public @org.apache.thrift.annotation.Nullable PrestoThriftServiceException ex1; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX1((short)1, "ex1");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX1
            return EX1;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PrestoThriftSplitBatch.class)));
      tmpMap.put(_Fields.EX1, new org.apache.thrift.meta_data.FieldMetaData("ex1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PrestoThriftServiceException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(prestoGetIndexSplits_result.class, metaDataMap);
    }

    public prestoGetIndexSplits_result() {
    }

    public prestoGetIndexSplits_result(
      PrestoThriftSplitBatch success,
      PrestoThriftServiceException ex1)
    {
      this();
      this.success = success;
      this.ex1 = ex1;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public prestoGetIndexSplits_result(prestoGetIndexSplits_result other) {
      if (other.isSetSuccess()) {
        this.success = new PrestoThriftSplitBatch(other.success);
      }
      if (other.isSetEx1()) {
        this.ex1 = new PrestoThriftServiceException(other.ex1);
      }
    }

    @Override
    public prestoGetIndexSplits_result deepCopy() {
      return new prestoGetIndexSplits_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex1 = null;
    }

    @org.apache.thrift.annotation.Nullable
    public PrestoThriftSplitBatch getSuccess() {
      return this.success;
    }

    public prestoGetIndexSplits_result setSuccess(@org.apache.thrift.annotation.Nullable PrestoThriftSplitBatch success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public PrestoThriftServiceException getEx1() {
      return this.ex1;
    }

    public prestoGetIndexSplits_result setEx1(@org.apache.thrift.annotation.Nullable PrestoThriftServiceException ex1) {
      this.ex1 = ex1;
      return this;
    }

    public void unsetEx1() {
      this.ex1 = null;
    }

    /** Returns true if field ex1 is set (has been assigned a value) and false otherwise */
    public boolean isSetEx1() {
      return this.ex1 != null;
    }

    public void setEx1IsSet(boolean value) {
      if (!value) {
        this.ex1 = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((PrestoThriftSplitBatch)value);
        }
        break;

      case EX1:
        if (value == null) {
          unsetEx1();
        } else {
          setEx1((PrestoThriftServiceException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX1:
        return getEx1();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX1:
        return isSetEx1();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof prestoGetIndexSplits_result)
        return this.equals((prestoGetIndexSplits_result)that);
      return false;
    }

    public boolean equals(prestoGetIndexSplits_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex1 = true && this.isSetEx1();
      boolean that_present_ex1 = true && that.isSetEx1();
      if (this_present_ex1 || that_present_ex1) {
        if (!(this_present_ex1 && that_present_ex1))
          return false;
        if (!this.ex1.equals(that.ex1))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetEx1()) ? 131071 : 524287);
      if (isSetEx1())
        hashCode = hashCode * 8191 + ex1.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(prestoGetIndexSplits_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetEx1(), other.isSetEx1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex1, other.ex1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("prestoGetIndexSplits_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex1:");
      if (this.ex1 == null) {
        sb.append("null");
      } else {
        sb.append(this.ex1);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class prestoGetIndexSplits_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public prestoGetIndexSplits_resultStandardScheme getScheme() {
        return new prestoGetIndexSplits_resultStandardScheme();
      }
    }

    private static class prestoGetIndexSplits_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<prestoGetIndexSplits_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, prestoGetIndexSplits_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new PrestoThriftSplitBatch();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex1 = new PrestoThriftServiceException();
                struct.ex1.read(iprot);
                struct.setEx1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, prestoGetIndexSplits_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ex1 != null) {
          oprot.writeFieldBegin(EX1_FIELD_DESC);
          struct.ex1.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class prestoGetIndexSplits_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public prestoGetIndexSplits_resultTupleScheme getScheme() {
        return new prestoGetIndexSplits_resultTupleScheme();
      }
    }

    private static class prestoGetIndexSplits_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<prestoGetIndexSplits_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, prestoGetIndexSplits_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx1()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetEx1()) {
          struct.ex1.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, prestoGetIndexSplits_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new PrestoThriftSplitBatch();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex1 = new PrestoThriftServiceException();
          struct.ex1.read(iprot);
          struct.setEx1IsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class prestoGetRows_args implements org.apache.thrift.TBase<prestoGetRows_args, prestoGetRows_args._Fields>, java.io.Serializable, Cloneable, Comparable<prestoGetRows_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("prestoGetRows_args");

    private static final org.apache.thrift.protocol.TField SPLIT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("splitId", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField COLUMNS_FIELD_DESC = new org.apache.thrift.protocol.TField("columns", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField MAX_BYTES_FIELD_DESC = new org.apache.thrift.protocol.TField("maxBytes", org.apache.thrift.protocol.TType.I64, (short)3);
    private static final org.apache.thrift.protocol.TField NEXT_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("nextToken", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new prestoGetRows_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new prestoGetRows_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable PrestoThriftId splitId; // required
    public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> columns; // required
    public long maxBytes; // required
    public @org.apache.thrift.annotation.Nullable PrestoThriftNullableToken nextToken; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SPLIT_ID((short)1, "splitId"),
      COLUMNS((short)2, "columns"),
      MAX_BYTES((short)3, "maxBytes"),
      NEXT_TOKEN((short)4, "nextToken");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SPLIT_ID
            return SPLIT_ID;
          case 2: // COLUMNS
            return COLUMNS;
          case 3: // MAX_BYTES
            return MAX_BYTES;
          case 4: // NEXT_TOKEN
            return NEXT_TOKEN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __MAXBYTES_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SPLIT_ID, new org.apache.thrift.meta_data.FieldMetaData("splitId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PrestoThriftId.class)));
      tmpMap.put(_Fields.COLUMNS, new org.apache.thrift.meta_data.FieldMetaData("columns", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.MAX_BYTES, new org.apache.thrift.meta_data.FieldMetaData("maxBytes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.NEXT_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("nextToken", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PrestoThriftNullableToken.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(prestoGetRows_args.class, metaDataMap);
    }

    public prestoGetRows_args() {
    }

    public prestoGetRows_args(
      PrestoThriftId splitId,
      java.util.List<java.lang.String> columns,
      long maxBytes,
      PrestoThriftNullableToken nextToken)
    {
      this();
      this.splitId = splitId;
      this.columns = columns;
      this.maxBytes = maxBytes;
      setMaxBytesIsSet(true);
      this.nextToken = nextToken;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public prestoGetRows_args(prestoGetRows_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetSplitId()) {
        this.splitId = new PrestoThriftId(other.splitId);
      }
      if (other.isSetColumns()) {
        java.util.List<java.lang.String> __this__columns = new java.util.ArrayList<java.lang.String>(other.columns);
        this.columns = __this__columns;
      }
      this.maxBytes = other.maxBytes;
      if (other.isSetNextToken()) {
        this.nextToken = new PrestoThriftNullableToken(other.nextToken);
      }
    }

    @Override
    public prestoGetRows_args deepCopy() {
      return new prestoGetRows_args(this);
    }

    @Override
    public void clear() {
      this.splitId = null;
      this.columns = null;
      setMaxBytesIsSet(false);
      this.maxBytes = 0;
      this.nextToken = null;
    }

    @org.apache.thrift.annotation.Nullable
    public PrestoThriftId getSplitId() {
      return this.splitId;
    }

    public prestoGetRows_args setSplitId(@org.apache.thrift.annotation.Nullable PrestoThriftId splitId) {
      this.splitId = splitId;
      return this;
    }

    public void unsetSplitId() {
      this.splitId = null;
    }

    /** Returns true if field splitId is set (has been assigned a value) and false otherwise */
    public boolean isSetSplitId() {
      return this.splitId != null;
    }

    public void setSplitIdIsSet(boolean value) {
      if (!value) {
        this.splitId = null;
      }
    }

    public int getColumnsSize() {
      return (this.columns == null) ? 0 : this.columns.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<java.lang.String> getColumnsIterator() {
      return (this.columns == null) ? null : this.columns.iterator();
    }

    public void addToColumns(java.lang.String elem) {
      if (this.columns == null) {
        this.columns = new java.util.ArrayList<java.lang.String>();
      }
      this.columns.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<java.lang.String> getColumns() {
      return this.columns;
    }

    public prestoGetRows_args setColumns(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> columns) {
      this.columns = columns;
      return this;
    }

    public void unsetColumns() {
      this.columns = null;
    }

    /** Returns true if field columns is set (has been assigned a value) and false otherwise */
    public boolean isSetColumns() {
      return this.columns != null;
    }

    public void setColumnsIsSet(boolean value) {
      if (!value) {
        this.columns = null;
      }
    }

    public long getMaxBytes() {
      return this.maxBytes;
    }

    public prestoGetRows_args setMaxBytes(long maxBytes) {
      this.maxBytes = maxBytes;
      setMaxBytesIsSet(true);
      return this;
    }

    public void unsetMaxBytes() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MAXBYTES_ISSET_ID);
    }

    /** Returns true if field maxBytes is set (has been assigned a value) and false otherwise */
    public boolean isSetMaxBytes() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MAXBYTES_ISSET_ID);
    }

    public void setMaxBytesIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MAXBYTES_ISSET_ID, value);
    }

    @org.apache.thrift.annotation.Nullable
    public PrestoThriftNullableToken getNextToken() {
      return this.nextToken;
    }

    public prestoGetRows_args setNextToken(@org.apache.thrift.annotation.Nullable PrestoThriftNullableToken nextToken) {
      this.nextToken = nextToken;
      return this;
    }

    public void unsetNextToken() {
      this.nextToken = null;
    }

    /** Returns true if field nextToken is set (has been assigned a value) and false otherwise */
    public boolean isSetNextToken() {
      return this.nextToken != null;
    }

    public void setNextTokenIsSet(boolean value) {
      if (!value) {
        this.nextToken = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SPLIT_ID:
        if (value == null) {
          unsetSplitId();
        } else {
          setSplitId((PrestoThriftId)value);
        }
        break;

      case COLUMNS:
        if (value == null) {
          unsetColumns();
        } else {
          setColumns((java.util.List<java.lang.String>)value);
        }
        break;

      case MAX_BYTES:
        if (value == null) {
          unsetMaxBytes();
        } else {
          setMaxBytes((java.lang.Long)value);
        }
        break;

      case NEXT_TOKEN:
        if (value == null) {
          unsetNextToken();
        } else {
          setNextToken((PrestoThriftNullableToken)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SPLIT_ID:
        return getSplitId();

      case COLUMNS:
        return getColumns();

      case MAX_BYTES:
        return getMaxBytes();

      case NEXT_TOKEN:
        return getNextToken();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SPLIT_ID:
        return isSetSplitId();
      case COLUMNS:
        return isSetColumns();
      case MAX_BYTES:
        return isSetMaxBytes();
      case NEXT_TOKEN:
        return isSetNextToken();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof prestoGetRows_args)
        return this.equals((prestoGetRows_args)that);
      return false;
    }

    public boolean equals(prestoGetRows_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_splitId = true && this.isSetSplitId();
      boolean that_present_splitId = true && that.isSetSplitId();
      if (this_present_splitId || that_present_splitId) {
        if (!(this_present_splitId && that_present_splitId))
          return false;
        if (!this.splitId.equals(that.splitId))
          return false;
      }

      boolean this_present_columns = true && this.isSetColumns();
      boolean that_present_columns = true && that.isSetColumns();
      if (this_present_columns || that_present_columns) {
        if (!(this_present_columns && that_present_columns))
          return false;
        if (!this.columns.equals(that.columns))
          return false;
      }

      boolean this_present_maxBytes = true;
      boolean that_present_maxBytes = true;
      if (this_present_maxBytes || that_present_maxBytes) {
        if (!(this_present_maxBytes && that_present_maxBytes))
          return false;
        if (this.maxBytes != that.maxBytes)
          return false;
      }

      boolean this_present_nextToken = true && this.isSetNextToken();
      boolean that_present_nextToken = true && that.isSetNextToken();
      if (this_present_nextToken || that_present_nextToken) {
        if (!(this_present_nextToken && that_present_nextToken))
          return false;
        if (!this.nextToken.equals(that.nextToken))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSplitId()) ? 131071 : 524287);
      if (isSetSplitId())
        hashCode = hashCode * 8191 + splitId.hashCode();

      hashCode = hashCode * 8191 + ((isSetColumns()) ? 131071 : 524287);
      if (isSetColumns())
        hashCode = hashCode * 8191 + columns.hashCode();

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(maxBytes);

      hashCode = hashCode * 8191 + ((isSetNextToken()) ? 131071 : 524287);
      if (isSetNextToken())
        hashCode = hashCode * 8191 + nextToken.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(prestoGetRows_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSplitId(), other.isSetSplitId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSplitId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.splitId, other.splitId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetColumns(), other.isSetColumns());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetColumns()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columns, other.columns);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetMaxBytes(), other.isSetMaxBytes());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMaxBytes()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxBytes, other.maxBytes);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetNextToken(), other.isSetNextToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNextToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nextToken, other.nextToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("prestoGetRows_args(");
      boolean first = true;

      sb.append("splitId:");
      if (this.splitId == null) {
        sb.append("null");
      } else {
        sb.append(this.splitId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("columns:");
      if (this.columns == null) {
        sb.append("null");
      } else {
        sb.append(this.columns);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("maxBytes:");
      sb.append(this.maxBytes);
      first = false;
      if (!first) sb.append(", ");
      sb.append("nextToken:");
      if (this.nextToken == null) {
        sb.append("null");
      } else {
        sb.append(this.nextToken);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (splitId != null) {
        splitId.validate();
      }
      if (nextToken != null) {
        nextToken.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class prestoGetRows_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public prestoGetRows_argsStandardScheme getScheme() {
        return new prestoGetRows_argsStandardScheme();
      }
    }

    private static class prestoGetRows_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<prestoGetRows_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, prestoGetRows_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SPLIT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.splitId = new PrestoThriftId();
                struct.splitId.read(iprot);
                struct.setSplitIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // COLUMNS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list274 = iprot.readListBegin();
                  struct.columns = new java.util.ArrayList<java.lang.String>(_list274.size);
                  @org.apache.thrift.annotation.Nullable java.lang.String _elem275;
                  for (int _i276 = 0; _i276 < _list274.size; ++_i276)
                  {
                    _elem275 = iprot.readString();
                    struct.columns.add(_elem275);
                  }
                  iprot.readListEnd();
                }
                struct.setColumnsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // MAX_BYTES
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.maxBytes = iprot.readI64();
                struct.setMaxBytesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // NEXT_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.nextToken = new PrestoThriftNullableToken();
                struct.nextToken.read(iprot);
                struct.setNextTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, prestoGetRows_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.splitId != null) {
          oprot.writeFieldBegin(SPLIT_ID_FIELD_DESC);
          struct.splitId.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.columns != null) {
          oprot.writeFieldBegin(COLUMNS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.columns.size()));
            for (java.lang.String _iter277 : struct.columns)
            {
              oprot.writeString(_iter277);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(MAX_BYTES_FIELD_DESC);
        oprot.writeI64(struct.maxBytes);
        oprot.writeFieldEnd();
        if (struct.nextToken != null) {
          oprot.writeFieldBegin(NEXT_TOKEN_FIELD_DESC);
          struct.nextToken.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class prestoGetRows_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public prestoGetRows_argsTupleScheme getScheme() {
        return new prestoGetRows_argsTupleScheme();
      }
    }

    private static class prestoGetRows_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<prestoGetRows_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, prestoGetRows_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSplitId()) {
          optionals.set(0);
        }
        if (struct.isSetColumns()) {
          optionals.set(1);
        }
        if (struct.isSetMaxBytes()) {
          optionals.set(2);
        }
        if (struct.isSetNextToken()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSplitId()) {
          struct.splitId.write(oprot);
        }
        if (struct.isSetColumns()) {
          {
            oprot.writeI32(struct.columns.size());
            for (java.lang.String _iter278 : struct.columns)
            {
              oprot.writeString(_iter278);
            }
          }
        }
        if (struct.isSetMaxBytes()) {
          oprot.writeI64(struct.maxBytes);
        }
        if (struct.isSetNextToken()) {
          struct.nextToken.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, prestoGetRows_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.splitId = new PrestoThriftId();
          struct.splitId.read(iprot);
          struct.setSplitIdIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list279 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
            struct.columns = new java.util.ArrayList<java.lang.String>(_list279.size);
            @org.apache.thrift.annotation.Nullable java.lang.String _elem280;
            for (int _i281 = 0; _i281 < _list279.size; ++_i281)
            {
              _elem280 = iprot.readString();
              struct.columns.add(_elem280);
            }
          }
          struct.setColumnsIsSet(true);
        }
        if (incoming.get(2)) {
          struct.maxBytes = iprot.readI64();
          struct.setMaxBytesIsSet(true);
        }
        if (incoming.get(3)) {
          struct.nextToken = new PrestoThriftNullableToken();
          struct.nextToken.read(iprot);
          struct.setNextTokenIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class prestoGetRows_result implements org.apache.thrift.TBase<prestoGetRows_result, prestoGetRows_result._Fields>, java.io.Serializable, Cloneable, Comparable<prestoGetRows_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("prestoGetRows_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField EX1_FIELD_DESC = new org.apache.thrift.protocol.TField("ex1", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new prestoGetRows_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new prestoGetRows_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable PrestoThriftPageResult success; // required
    public @org.apache.thrift.annotation.Nullable PrestoThriftServiceException ex1; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX1((short)1, "ex1");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX1
            return EX1;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PrestoThriftPageResult.class)));
      tmpMap.put(_Fields.EX1, new org.apache.thrift.meta_data.FieldMetaData("ex1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PrestoThriftServiceException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(prestoGetRows_result.class, metaDataMap);
    }

    public prestoGetRows_result() {
    }

    public prestoGetRows_result(
      PrestoThriftPageResult success,
      PrestoThriftServiceException ex1)
    {
      this();
      this.success = success;
      this.ex1 = ex1;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public prestoGetRows_result(prestoGetRows_result other) {
      if (other.isSetSuccess()) {
        this.success = new PrestoThriftPageResult(other.success);
      }
      if (other.isSetEx1()) {
        this.ex1 = new PrestoThriftServiceException(other.ex1);
      }
    }

    @Override
    public prestoGetRows_result deepCopy() {
      return new prestoGetRows_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex1 = null;
    }

    @org.apache.thrift.annotation.Nullable
    public PrestoThriftPageResult getSuccess() {
      return this.success;
    }

    public prestoGetRows_result setSuccess(@org.apache.thrift.annotation.Nullable PrestoThriftPageResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public PrestoThriftServiceException getEx1() {
      return this.ex1;
    }

    public prestoGetRows_result setEx1(@org.apache.thrift.annotation.Nullable PrestoThriftServiceException ex1) {
      this.ex1 = ex1;
      return this;
    }

    public void unsetEx1() {
      this.ex1 = null;
    }

    /** Returns true if field ex1 is set (has been assigned a value) and false otherwise */
    public boolean isSetEx1() {
      return this.ex1 != null;
    }

    public void setEx1IsSet(boolean value) {
      if (!value) {
        this.ex1 = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((PrestoThriftPageResult)value);
        }
        break;

      case EX1:
        if (value == null) {
          unsetEx1();
        } else {
          setEx1((PrestoThriftServiceException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX1:
        return getEx1();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX1:
        return isSetEx1();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof prestoGetRows_result)
        return this.equals((prestoGetRows_result)that);
      return false;
    }

    public boolean equals(prestoGetRows_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex1 = true && this.isSetEx1();
      boolean that_present_ex1 = true && that.isSetEx1();
      if (this_present_ex1 || that_present_ex1) {
        if (!(this_present_ex1 && that_present_ex1))
          return false;
        if (!this.ex1.equals(that.ex1))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetEx1()) ? 131071 : 524287);
      if (isSetEx1())
        hashCode = hashCode * 8191 + ex1.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(prestoGetRows_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetEx1(), other.isSetEx1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex1, other.ex1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("prestoGetRows_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex1:");
      if (this.ex1 == null) {
        sb.append("null");
      } else {
        sb.append(this.ex1);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class prestoGetRows_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public prestoGetRows_resultStandardScheme getScheme() {
        return new prestoGetRows_resultStandardScheme();
      }
    }

    private static class prestoGetRows_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<prestoGetRows_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, prestoGetRows_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new PrestoThriftPageResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex1 = new PrestoThriftServiceException();
                struct.ex1.read(iprot);
                struct.setEx1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, prestoGetRows_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ex1 != null) {
          oprot.writeFieldBegin(EX1_FIELD_DESC);
          struct.ex1.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class prestoGetRows_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public prestoGetRows_resultTupleScheme getScheme() {
        return new prestoGetRows_resultTupleScheme();
      }
    }

    private static class prestoGetRows_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<prestoGetRows_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, prestoGetRows_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx1()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetEx1()) {
          struct.ex1.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, prestoGetRows_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new PrestoThriftPageResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex1 = new PrestoThriftServiceException();
          struct.ex1.read(iprot);
          struct.setEx1IsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
